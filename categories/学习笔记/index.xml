<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记 on Fly With Bug</title>
    <link>http://blog.flywithme.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 学习笔记 on Fly With Bug</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Fri, 16 Mar 2018 16:02:01 +0800</lastBuildDate>
    
	<atom:link href="http://blog.flywithme.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go: 14-3 多任务版爬虫</title>
      <link>http://blog.flywithme.top/2018/03/16/note_26/</link>
      <pubDate>Fri, 16 Mar 2018 16:02:01 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/16/note_26/</guid>
      <description>并发调度器 //engine package engine import ( &amp;quot;log&amp;quot; ) type ConcurrentEngine struct { Scheduler Scheduler WorkerCount int } type Scheduler interface { ReadyNotifier Submit(Request) WorkerChan() chan Request Run() } type ReadyNotifier interface { WokerReady(chan Request) } func (e *ConcurrentEngine) Run(seeds ...Request) { out := make(chan ParseResult) e.Scheduler.Run() for i := 0; i &amp;lt; e.WorkerCount; i++ { createWorker(e.Scheduler.WorkerChan(), out, e.Scheduler) } for _, r := range seeds {</description>
    </item>
    
    <item>
      <title>Go: 14-2 单任务版爬虫</title>
      <link>http://blog.flywithme.top/2018/03/14/note_25/</link>
      <pubDate>Wed, 14 Mar 2018 16:54:13 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/14/note_25/</guid>
      <description>总体的算法步骤 解析器 Parser 输入： utf-8 编码的文本 输出： Request{URL,对应的Parser} 列表，Item列表 单任务版爬虫架构 获取并打印所有城</description>
    </item>
    
    <item>
      <title>Go: 14-1 爬虫实现</title>
      <link>http://blog.flywithme.top/2018/03/09/note_24/</link>
      <pubDate>Fri, 09 Mar 2018 16:05:38 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/09/note_24/</guid>
      <description>获取初始页面内容 使用相亲网站做目标 编码格式自动识别转换 获取有价值信息 获取城市名称和链接 使用css选择器 使用xpath 使用正则表达式 package main import ( &amp;quot;fmt&amp;quot;</description>
    </item>
    
    <item>
      <title>Go: 13-1 爬虫简介</title>
      <link>http://blog.flywithme.top/2018/03/08/note_23/</link>
      <pubDate>Thu, 08 Mar 2018 17:13:27 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/08/note_23/</guid>
      <description>网络爬虫分类 通用爬虫：如baidu,google 聚焦爬虫：从互联网获取结构化数据 项目总体结构 go语言的爬虫库/框架 henrylee2cn/pholcus gocrawl colly hu17889/go_spider 重新开发一个爬虫库</description>
    </item>
    
    <item>
      <title>Go: 12-1 迷宫的广度优先搜索</title>
      <link>http://blog.flywithme.top/2018/03/07/note_22/</link>
      <pubDate>Wed, 07 Mar 2018 17:21:14 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/07/note_22/</guid>
      <description>示例：广度优先算法 为爬虫实战做准备 应用广泛，综合性强 示例：广度优先搜索走迷宫 广度优先算法示意图 用循环创建二维slice 使用slice来实现队</description>
    </item>
    
    <item>
      <title>Go: 11-2 其他标准库</title>
      <link>http://blog.flywithme.top/2018/03/07/note_21/</link>
      <pubDate>Wed, 07 Mar 2018 16:54:46 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/07/note_21/</guid>
      <description>其他标准库 bufio log encoding/json regexp time stings/math/rand 查看库文档 godoc -http :8888 (启用本地文档服务器) https://studygolang.com/pkgdoc</description>
    </item>
    
    <item>
      <title>Go: 11-1 http标准库</title>
      <link>http://blog.flywithme.top/2018/03/07/note_20/</link>
      <pubDate>Wed, 07 Mar 2018 13:24:53 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/07/note_20/</guid>
      <description>Server package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; ) func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, &amp;quot;Hello, world!&amp;quot;) } func main() { http.HandleFunc(&amp;quot;/&amp;quot;, handler) http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil) } Client 使用http客户端发送请求 使用http.Client 控制请求头部等 使用httputil</description>
    </item>
    
    <item>
      <title>Go: 10-2 传统同步机制</title>
      <link>http://blog.flywithme.top/2018/03/07/note_19/</link>
      <pubDate>Wed, 07 Mar 2018 11:53:27 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/07/note_19/</guid>
      <description>检测数据冲突 未加锁时使用 go run -race atomic.go 时检测会发现数据访问冲突 加锁之后 运行-race 数据访问冲突就没了 传统同步机制 WaitGroup package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; ) func doWork(id int, w worker) { for n</description>
    </item>
    
    <item>
      <title>Go: 10-1 channel</title>
      <link>http://blog.flywithme.top/2018/03/04/note_18/</link>
      <pubDate>Sun, 04 Mar 2018 19:59:50 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/04/note_18/</guid>
      <description>channel的用法 channel buffered channel range 理论基础：Communication Sequential Process(CSP) Don&amp;rsquo;t communicate by sharing memory;share memory by communicating(不要通过共享内存来通信， 通过通</description>
    </item>
    
    <item>
      <title>Go: 9-1 goroutine 并发编程</title>
      <link>http://blog.flywithme.top/2018/03/04/note_17/</link>
      <pubDate>Sun, 04 Mar 2018 18:02:36 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/04/note_17/</guid>
      <description>示例 func main() { for i := 0; i &amp;lt; 1000; i++ { go func(i int) { for { fmt.Printf(&amp;quot;Hello form goroutine %d \n&amp;quot;, i) } }(i) } } 协程 Coroutine 轻量级&amp;rdquo;线程&amp;rdquo; 非抢占式多任务处理，由协程主动交出控</description>
    </item>
    
    <item>
      <title>Go: 8-2 生成文档和示例代码</title>
      <link>http://blog.flywithme.top/2018/03/04/note_16/</link>
      <pubDate>Sun, 04 Mar 2018 13:05:35 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/04/note_16/</guid>
      <description>文档 用注释写文档 在测试中加入Example 使用go doc/godoc 生成文档 package queue import ( &amp;quot;fmt&amp;quot; ) //A FIFO queue. type Queue []interface{} func (q *Queue) Push(v int) { fmt.Println(q) *q = append(*q, v) } // Pops element from head. func (q *Queue) Pop() int { head := (*q)[0] *q =</description>
    </item>
    
    <item>
      <title>Go: 8-1 测试http服务器</title>
      <link>http://blog.flywithme.top/2018/03/02/note_15/</link>
      <pubDate>Fri, 02 Mar 2018 15:57:46 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/02/note_15/</guid>
      <description>针对7-2章节中的errorWapper的测试 （示例代码在 imooc/errorHandler） 通过虚拟Request/Response来测</description>
    </item>
    
    <item>
      <title>Go: 8-1 测试</title>
      <link>http://blog.flywithme.top/2018/03/01/note_14/</link>
      <pubDate>Thu, 01 Mar 2018 16:01:31 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/03/01/note_14/</guid>
      <description>传统测试 测试数据和测试逻辑混在一起 出错信息不明确 一旦一个数据出错，测试全部结束 @Test public void testAdd(){ assertEquals(3,add(1,2)); assertEquals(2,add(0,2)); assertEquals(0,add(0,0)); assertEquals(0,add(1,-1)); assertEquals(Integer.MIN_VALUE,add(1,Integer.MAX_VALUE)); } 表格驱动测试 分离了测试数据和测试逻辑 明确的</description>
    </item>
    
    <item>
      <title>Go: 7-2 服务器统一出错处理</title>
      <link>http://blog.flywithme.top/2018/02/24/note_13/</link>
      <pubDate>Sat, 24 Feb 2018 17:43:08 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/24/note_13/</guid>
      <description>如何实现统一的错误处理逻辑 Error部分 在业务部分只处理正确的返回，error部分返回给调用部分 在函数输入部分做一个包装，然后再输出一个函数</description>
    </item>
    
    <item>
      <title>Go: 7-1 资源管理与出错处理</title>
      <link>http://blog.flywithme.top/2018/02/24/note_12/</link>
      <pubDate>Sat, 24 Feb 2018 17:06:34 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/24/note_12/</guid>
      <description>defer的调用 确保调用在函数结束时发生 (Open/Close,Lock/Unlock,PrintHeader/PrintFooter) func a() int { defer b() return 0 } //b 的执行是发生在 return 0 之后，注意 defer 的语法，关键字 defer 之后是函数的调用。 defer 的作用就是把</description>
    </item>
    
    <item>
      <title>Go: 6-2 函数式编程</title>
      <link>http://blog.flywithme.top/2018/02/24/note_11/</link>
      <pubDate>Sat, 24 Feb 2018 14:35:09 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/24/note_11/</guid>
      <description>go语言闭包的应用 更为自然，不需要修饰如何访问自由变量 没有Lambda表达式，但是有匿名函数 package fib //斐波那契数列 // 1, 1, 2, 3, 5, 8, 13, ... func Fibonacci() func() int {</description>
    </item>
    
    <item>
      <title>Go: 6-1 函数式编程</title>
      <link>http://blog.flywithme.top/2018/02/12/note_10/</link>
      <pubDate>Mon, 12 Feb 2018 13:32:36 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/12/note_10/</guid>
      <description>特点 函数可以作为参数，变量，返回值 高阶函数 函数-&amp;gt;闭包 //golang func adder() func(int) int { sum := 0 //自由变量 return func(v int) int { sum += v return sum } } //python def adder(); sum = 0 def f(value): nonlocal sum sum += value</description>
    </item>
    
    <item>
      <title>Go: 5-1 接口</title>
      <link>http://blog.flywithme.top/2018/02/09/note_09/</link>
      <pubDate>Fri, 09 Feb 2018 15:16:41 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/09/note_09/</guid>
      <description>duck typing 基于特征，而不是基于类型 描述的事物的外部行为，而不是内部结构 pythn中的duck typing def download(retriever): return retriever.get(&amp;quot;www.downloadurl.com&amp;quot;) 运行时才知道传入的retriever有没有g</description>
    </item>
    
    <item>
      <title>Go: 4-1 面向对象</title>
      <link>http://blog.flywithme.top/2018/02/08/note_08/</link>
      <pubDate>Thu, 08 Feb 2018 11:34:35 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/08/note_08/</guid>
      <description>Go语言的面向对象 Go语言仅支持封装，不支持继承和多态 Go语言没有class，只有struct 结构的创建 使用自定义工厂函数，需要返回局部变量</description>
    </item>
    
    <item>
      <title>Go: 3-2 Map 和字符串的一些操作</title>
      <link>http://blog.flywithme.top/2018/02/07/note_07/</link>
      <pubDate>Wed, 07 Feb 2018 17:52:33 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/07/note_07/</guid>
      <description>Map rune 相当于go的char strings Map Map 是一种无序的键值对的集合。最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。 Map 是一种集合，可</description>
    </item>
    
    <item>
      <title>Go: 3-1 数组、切片和容器</title>
      <link>http://blog.flywithme.top/2018/02/05/note_06/</link>
      <pubDate>Mon, 05 Feb 2018 16:44:58 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/05/note_06/</guid>
      <description>数组 (值类型) [10]int 和 [5]int 是不同的类型 调用func f(arr [5]int)会拷贝数组 调用func f1(arr *[5]int)可以在方法里修改arr Go中一般不直接使</description>
    </item>
    
    <item>
      <title>Go: 2-4 指针</title>
      <link>http://blog.flywithme.top/2018/02/05/note_05/</link>
      <pubDate>Mon, 05 Feb 2018 15:29:31 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/05/note_05/</guid>
      <description>什么是指针 一个指针变量可以指向任何一个值的内存地址它指向那个值的内存地址。 类似于变量和常量，在使用指针前你需要声明指针 如何使用指针 定义指针变</description>
    </item>
    
    <item>
      <title>Go: 2-3 函数</title>
      <link>http://blog.flywithme.top/2018/02/04/note_04/</link>
      <pubDate>Sun, 04 Feb 2018 14:37:54 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/04/note_04/</guid>
      <description>函数 函数是基本的代码块，用于执行一个任务。 Go 语言最少有个 main() 函数。 你可以通过函数来划分不同功能，逻辑上每个函数执行的是指定的任务。 函数声明告诉</description>
    </item>
    
    <item>
      <title>Go: 2-2 条件语句和循环语句</title>
      <link>http://blog.flywithme.top/2018/02/04/note_03/</link>
      <pubDate>Sun, 04 Feb 2018 14:05:59 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/04/note_03/</guid>
      <description>语句 描述 if 语句 if 语句 由一个布尔表达式后紧跟一个或多个语句组成 if&amp;hellip;else if 语句 后可以使用可选的 else 语句, else 语句中的表达式在布尔表达式为 false 时执行。 if 嵌套语</description>
    </item>
    
    <item>
      <title>Go: 2-1 变量定义</title>
      <link>http://blog.flywithme.top/2018/02/03/note_02/</link>
      <pubDate>Sat, 03 Feb 2018 19:45:12 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/03/note_02/</guid>
      <description>变量声明 指定变量类型，声明后若不赋值，使用默认值。 根据值编译器自行判定变量类型。 省略var, 注意 :=左侧的变量不应该是已经声明过的，否则会导</description>
    </item>
    
    <item>
      <title>Go:记笔：1-1 导读</title>
      <link>http://blog.flywithme.top/2018/02/02/note_01/</link>
      <pubDate>Fri, 02 Feb 2018 17:27:32 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/02/02/note_01/</guid>
      <description>GO语言很特别 没有&amp;rdquo;对象&amp;rdquo;，没有继承多态，没有泛型，么有try/catch 有接口，函数式变成，CSP并发模型（gor</description>
    </item>
    
    <item>
      <title>Go 语言总结</title>
      <link>http://blog.flywithme.top/2018/01/30/go/</link>
      <pubDate>Tue, 30 Jan 2018 15:02:26 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2018/01/30/go/</guid>
      <description>前言：本篇文章整理自 ccmouse 发布的视频（搭建并行管道，感受GO语言魅力） Go 归类总结 类型检查：编译时 运行环境：编译成机器代码直接运行 GO语言的特色：</description>
    </item>
    
    <item>
      <title>pigeon </title>
      <link>http://blog.flywithme.top/2017/12/13/pigeon/</link>
      <pubDate>Wed, 13 Dec 2017 21:55:46 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/12/13/pigeon/</guid>
      <description>小记 最近做持续的自动集成工具，例如数据模型好api接口模型的自动化生产，Code提交自动检查，合并代码到打包分支自动打包等等 我们需要实时监控</description>
    </item>
    
    <item>
      <title>Shell 小记，-文本操作</title>
      <link>http://blog.flywithme.top/2017/11/17/shell/</link>
      <pubDate>Fri, 17 Nov 2017 16:26:03 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/11/17/shell/</guid>
      <description>修改文件的某一行内容 做自动的git提交和PodSpec发布脚本 需要在提交之前使用shell脚本修改podSpec文件的Version版本号。</description>
    </item>
    
    <item>
      <title>Jenkins-打包之远程构建</title>
      <link>http://blog.flywithme.top/2017/11/16/Jenkins/</link>
      <pubDate>Thu, 16 Nov 2017 16:59:57 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/11/16/Jenkins/</guid>
      <description>在大型项目中，经常会有新的业务或者基础库需要更新合并进入测试分支，然后使用Jenkins打包给测试人员进行测试。 但是如果人工去构建打包又会显</description>
    </item>
    
    <item>
      <title>无线真机调试-Xcode9 -iOS</title>
      <link>http://blog.flywithme.top/2017/11/16/wirelessdebug/</link>
      <pubDate>Thu, 16 Nov 2017 11:15:21 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/11/16/wirelessdebug/</guid>
      <description>首先你需要 Mac系统电脑 安装Xcode9 iPhone设备需要iOS11的系统 其次你的手机必须和电脑处于同一个无线局域网中 首次安装连接需要先连</description>
    </item>
    
    <item>
      <title>imageMagick 和 PlistBuddy合体生成图标</title>
      <link>http://blog.flywithme.top/2017/11/15/PlistBuddy/</link>
      <pubDate>Wed, 15 Nov 2017 19:06:14 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/11/15/PlistBuddy/</guid>
      <description>demo地址 图片内容处理文件 (merchant-icon-generator.sh) #获取参数 文件源 SRC_FILE=&amp;quot;$1&amp;quot; #版本号 shortVersion=&amp;quot;$2&amp;quot; #标签number bundlerNum=&amp;quot;$3&amp;quot; #转换 文件 绘制 坐标 填充 颜色 透明度 填充 坐标 填充 颜色 透明度 生成目标</description>
    </item>
    
    <item>
      <title>golang web Send Email</title>
      <link>http://blog.flywithme.top/2017/11/13/mail/</link>
      <pubDate>Mon, 13 Nov 2017 17:20:15 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/11/13/mail/</guid>
      <description>//注意邮件格式，以免被当垃圾邮件 package email import ( &amp;quot;net/smtp&amp;quot; &amp;quot;strings&amp;quot; ) const ( HOST = &amp;quot;smtp.163.com&amp;quot; SERVER_ADDR = &amp;quot;smtp.163.com:25&amp;quot; USER = &amp;quot;xxx@163.com&amp;quot; //发送邮件的邮箱 PASSWORD = &amp;quot;xxx&amp;quot; //发送邮件邮箱的客户端授权密码 ) type Email struct { to string</description>
    </item>
    
    <item>
      <title>ubuntu ssh免密登陆</title>
      <link>http://blog.flywithme.top/2017/11/13/sshnopass/</link>
      <pubDate>Mon, 13 Nov 2017 11:40:09 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/11/13/sshnopass/</guid>
      <description>前置条件： 一台主流的Linux服务器，如CentOS,Ubuntu,Fedora,redhat等 一台能连上以上服务器的客户机，我用的mac，</description>
    </item>
    
    <item>
      <title>web01-配置Mysql</title>
      <link>http://blog.flywithme.top/2017/11/11/gin-mysql-Web/</link>
      <pubDate>Sat, 11 Nov 2017 19:57:02 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/11/11/gin-mysql-Web/</guid>
      <description>安装Mysql 创建userInfo表 CREATE TABLE `userinfo` ( `uid` int(11) unsigned NOT NULL AUTO_INCREMENT, `username` varchar(16) DEFAULT &#39;&#39;, `departname` varchar(20) DEFAULT &#39;&#39;, `password` varchar(32) DEFAULT &#39;&#39;, `sex` tinyint(1) unsigned zerofill DEFAULT &#39;0&#39;, `userid` varchar(32) DEFAULT &#39;&#39;, `phone` varchar(13) DEFAULT &#39;&#39;, `phoneprefix` varchar(6) DEFAULT &#39;&#39;, `createtime` int(10) unsigned NOT NULL, `updatetime` int(10) unsigned NOT NULL, `state` tinyint(1)</description>
    </item>
    
    <item>
      <title>imagemagic</title>
      <link>http://blog.flywithme.top/2017/11/10/imagemagic/</link>
      <pubDate>Fri, 10 Nov 2017 12:11:33 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/11/10/imagemagic/</guid>
      <description>首先：brew install ImageMagick 熟悉ImageMagick命令： resize当前目录下的图片到100x100f分辨率 convert 1024x1024.png -resize 100x100 icon02.png 填充某像 convert 1024x1024.png -region 1024x224+0+800 -fill &amp;quot;rgb(255,166,48)&amp;quot; -colorize 100% new.png convert</description>
    </item>
    
    <item>
      <title>使用gin框架实现一个基于Mysql数据库的用户系统-填坑部分</title>
      <link>http://blog.flywithme.top/2017/11/05/gin-mysql/</link>
      <pubDate>Sun, 05 Nov 2017 20:17:21 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/11/05/gin-mysql/</guid>
      <description>项目地址：https://github.com/flywithbug/darkside 欢迎fork。 TODO 更新更多内容 填坑1- struct to json 时，空值忽略</description>
    </item>
    
    <item>
      <title>iOS11 ScrollView 页面下移问题</title>
      <link>http://blog.flywithme.top/2017-09-30-iOS11ScrollView20pt/</link>
      <pubDate>Sat, 30 Sep 2017 14:58:00 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017-09-30-iOS11ScrollView20pt/</guid>
      <description>一、iOS 11下APP中tableView内容下移20pt或下移64pt的原因分析 二、 adjustContentInset属性的计算方式 三、</description>
    </item>
    
    <item>
      <title>大文件分片上传解决方案</title>
      <link>http://blog.flywithme.top/2017/08/03/bigFileUpload/</link>
      <pubDate>Thu, 03 Aug 2017 13:44:56 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/08/03/bigFileUpload/</guid>
      <description>分片模型：索引，上传状态，偏移量，大小，文件名，类型，分片数 md5: 获取文件的md5值 文件管理工具：文件路径， 分析文件内容，生成数据。 上传任务池中</description>
    </item>
    
    <item>
      <title>swift3-22</title>
      <link>http://blog.flywithme.top/2017/04/17/swift22/</link>
      <pubDate>Mon, 17 Apr 2017 10:48:35 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/04/17/swift22/</guid>
      <description></description>
    </item>
    
    <item>
      <title>swift3-21 析构过程</title>
      <link>http://blog.flywithme.top/2017/04/13/swift21/</link>
      <pubDate>Thu, 13 Apr 2017 17:19:53 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/04/13/swift21/</guid>
      <description>在一个类的实例被释放之前，析构函数就被立即调用，用关键字 deinit 来表示析构函数， 类似与初始化使用 init 来标示。析构函数只适用于类类型。 析构过程原理 Sw</description>
    </item>
    
    <item>
      <title>swift3-20 构造过程</title>
      <link>http://blog.flywithme.top/2017/04/13/swift20/</link>
      <pubDate>Thu, 13 Apr 2017 16:24:52 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/04/13/swift20/</guid>
      <description>构造过程是为了使用某个类、结构体或者枚举类型实例而进行的准备过程。这个过程包含了为实例的每一个属性设置初始值 的初始化任务 swift的构造函数</description>
    </item>
    
    <item>
      <title>swift3-19 多态性</title>
      <link>http://blog.flywithme.top/2017/04/13/swift19/</link>
      <pubDate>Thu, 13 Apr 2017 12:00:36 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/04/13/swift19/</guid>
      <description>多态性 同样的操作或者方法，不同的对象执行的时候表现出完全不同的行为 使用父类指针或者引用指向子类的实例，然后再自雷中覆盖父类的方法，利用父类引</description>
    </item>
    
    <item>
      <title>swift3-18 继承</title>
      <link>http://blog.flywithme.top/2017/04/01/swift18/</link>
      <pubDate>Sat, 01 Apr 2017 22:29:17 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/04/01/swift18/</guid>
      <description>继承：我们可以理解为一个类获取了另外一个类的方法和属性。当一个类继承其它类时，继承类叫子类，被继承类叫超类（或父类)， 我们也可以为类中继承来</description>
    </item>
    
    <item>
      <title>swift3-17 单例</title>
      <link>http://blog.flywithme.top/2017/03/31/swift17/</link>
      <pubDate>Fri, 31 Mar 2017 19:47:41 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/03/31/swift17/</guid>
      <description>单例写法 public class Manager{ public var score = 0 public static let defaultManager = Manager.init() private init(){ } public func addScore(){ score += 10 } } let manager = Manager.defaultManager manager.addScore() manager.score manager.addScore() manager.score let manager2 = Manager.defaultManager manager2.addScore() manager2.score</description>
    </item>
    
    <item>
      <title>swift3-16 属性</title>
      <link>http://blog.flywithme.top/2017/03/30/swift16/</link>
      <pubDate>Thu, 30 Mar 2017 16:53:45 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/03/30/swift16/</guid>
      <description>Swift 属性将值跟特定的类、结构或枚举关联 属性可分为存储属性和计算属性: 存储属性 计算属性 存储常量或变量作为实例的一部分 计算（而不是存储）一个值 用于</description>
    </item>
    
    <item>
      <title>swift3-15 类</title>
      <link>http://blog.flywithme.top/2017/03/29/swift15/</link>
      <pubDate>Wed, 29 Mar 2017 14:18:03 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/03/29/swift15/</guid>
      <description>类：Swift 类是构建代码所用的一种通用且灵活的结构体。我们可以为类定义属性和方法。 与其他编程语言不同的是,Swift 并不要求你为自定义的类</description>
    </item>
    
    <item>
      <title>swift3-14 结构体</title>
      <link>http://blog.flywithme.top/2017/03/23/swift3-14/</link>
      <pubDate>Thu, 23 Mar 2017 16:54:15 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/03/23/swift3-14/</guid>
      <description>Swift 结构体是构建代码所用的一种通用且灵活的构造体。我们可以为结构体定义属性（常量、变量）和添加方法，从而扩展结构体的功能. 与 C 和 Objective-C 不同的是: 结</description>
    </item>
    
    <item>
      <title>swift3-13 枚举</title>
      <link>http://blog.flywithme.top/2017/03/21/swift13/</link>
      <pubDate>Tue, 21 Mar 2017 15:30:52 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/03/21/swift13/</guid>
      <description>枚举简单的说也是一种数据类型，只不过是这种数据类型只包含自定义的特定数据，它是一组有共同特性的数据的集合。 Swift 的枚举类似于 Objective C 和 C 的结构 枚举的</description>
    </item>
    
    <item>
      <title>swift3-12 闭包</title>
      <link>http://blog.flywithme.top/2017/02/28/swift12/</link>
      <pubDate>Tue, 28 Feb 2017 17:43:27 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/28/swift12/</guid>
      <description>闭包 闭包(Closures)是自包含的功能代码块,可以在代码中使用或者用来传参传值。 Swift 的闭包与 C 和 Objective-C 中的代码块(blocks)以及其他一些编</description>
    </item>
    
    <item>
      <title>swift3-11 函数</title>
      <link>http://blog.flywithme.top/2017/02/27/swift11/</link>
      <pubDate>Mon, 27 Feb 2017 13:41:21 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/27/swift11/</guid>
      <description>函数定义 Swift 定义函数使用关键字 func。 定义函数的时候，可以指定一个或多个输入参数和一个返回值类型。 每个函数都有一个函数名来描述它的功能。通过</description>
    </item>
    
    <item>
      <title>swift3-10 数据集合小节</title>
      <link>http://blog.flywithme.top/2017/02/22/swift10/</link>
      <pubDate>Wed, 22 Feb 2017 16:15:18 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/22/swift10/</guid>
      <description>选择合适的数据结构 数组: 有序,最大的特定就是有序,如果我们操作的元素是有序的话,使用数组是最方便的。如果需要排序,最好也选择数组 集合: 无序,</description>
    </item>
    
    <item>
      <title>Swift3-09 集合</title>
      <link>http://blog.flywithme.top/2017/02/22/swift09/</link>
      <pubDate>Wed, 22 Feb 2017 15:18:43 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/22/swift09/</guid>
      <description>将一些元素放在一起,它们是无序的, 跟数组的不同是,数组是一个有序的列表,而集合是一个有序的数据集 为什么需要集合,因为集合是无序的,所以,在做</description>
    </item>
    
    <item>
      <title>Swift3-08 字典</title>
      <link>http://blog.flywithme.top/2017/02/22/swift08/</link>
      <pubDate>Wed, 22 Feb 2017 14:12:36 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/22/swift08/</guid>
      <description>字典是存储 键-值 数据对的无序数据集合 基本方法 var dic = [&amp;quot;key&amp;quot;:&amp;quot;value&amp;quot;, &amp;quot;a&amp;quot;:&amp;quot;b&amp;quot;] dic[&amp;quot;key&amp;quot;] var value = dic[&amp;quot;key&amp;quot;] //返回的 value 是一个可选型 value = dic[&amp;quot;daaaa&amp;quot;] dict.isEmpty dict.count if let value = dic[&amp;quot;key&amp;quot;]{ print(value) } var dict:[String:Int] = [&amp;quot;1&amp;quot;:1,&amp;quot;2&amp;quot;:2] dict[&amp;quot;1&amp;quot;] var dict01:[Int:Int] = [1:1,2:2] dict01[1] var dict02:[Int:Any] = [1:1,2:&amp;quot;a&amp;quot;]</description>
    </item>
    
    <item>
      <title>Swift3-07 数组</title>
      <link>http://blog.flywithme.top/2017/02/21/swift07/</link>
      <pubDate>Tue, 21 Feb 2017 15:38:45 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/21/swift07/</guid>
      <description>数组是 Swift 三种最基本的数据集合的一种,这三种集合分别是: Array Dictionary set 数组的概念就是一个有序的数据序列,概念很简单,我们已经很熟悉。 初始化方式 var numbers = [0,1,2,3]</description>
    </item>
    
    <item>
      <title>Swift3-06 可选型 Optionals</title>
      <link>http://blog.flywithme.top/2017/02/20/swift06/</link>
      <pubDate>Mon, 20 Feb 2017 15:22:44 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/20/swift06/</guid>
      <description>画重点! Optionals 是 swift 新加入的类型,所以之前的 Objective-C 中是没有这个概念的。可选型 简单一些理解就是:有值的时候就有值,无值的时候 是 nil. 但是 swift 的 nil 和其他语言中的</description>
    </item>
    
    <item>
      <title>Swift3-05 逻辑控制</title>
      <link>http://blog.flywithme.top/2017/02/17/swift05/</link>
      <pubDate>Fri, 17 Feb 2017 17:34:01 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/17/swift05/</guid>
      <description>控制流的三种基本结构: 顺序结构: 顺序语句有语句序列组成,程序执行时,按照语句顺序,从上而下,一条一条顺序执行 循环结构 循环语句使用同一个语句组</description>
    </item>
    
    <item>
      <title>Swift3-04 基础运算符</title>
      <link>http://blog.flywithme.top/2017/02/17/swift04/</link>
      <pubDate>Fri, 17 Feb 2017 11:00:55 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/17/swift04/</guid>
      <description>赋值运算符 = 这里是没有返回值的。返回值可能是Void，此时不等于nil，即赋值成功；或等于nil，即赋值失败 var a = 3 a = 2 数学运算符 + - * /</description>
    </item>
    
    <item>
      <title>Swift3-03 基础类型</title>
      <link>http://blog.flywithme.top/2017/02/16/swift03/</link>
      <pubDate>Thu, 16 Feb 2017 16:11:36 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/16/swift03/</guid>
      <description>常量 let let a = 1 let b:Int b = 1 变量 var var b = 2 swift 是一个强类型语言: var x = 1 x = &amp;quot;abc&amp;quot; //会报错(Cannot assign value of type &amp;quot;String&amp;quot; to type &amp;quot;int&amp;quot;) 显示声明变量 let s:String = &amp;quot;abc&amp;quot; 一次声明</description>
    </item>
    
    <item>
      <title>Swift3-02 初见</title>
      <link>http://blog.flywithme.top/2017/02/16/swift02/</link>
      <pubDate>Thu, 16 Feb 2017 11:27:44 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/16/swift02/</guid>
      <description>首先我们来在屏幕上输出一个 hello world print(&amp;quot;hello world&amp;quot;) 不需要 import 任何库,可以直接在全局作用域使用。代码结尾不要带分号。 Xcode 提供了代码预览功能 Playground . 使用它可以加快 swi</description>
    </item>
    
    <item>
      <title>关于 Swift3-01</title>
      <link>http://blog.flywithme.top/2017/02/09/swift01/</link>
      <pubDate>Thu, 09 Feb 2017 10:12:48 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/02/09/swift01/</guid>
      <description>Swift 是一门新的编程语言，用于编写 iOS、OS X 以及 watchOS 应用程序。Swift 结合了 C 和 Objective-C 的优点并且不受C兼容性的限制。 Swift 使用安全的编程模式并添加了</description>
    </item>
    
    <item>
      <title>Go语言fmt包Printf方法详解t</title>
      <link>http://blog.flywithme.top/2017/01/01/golangfmt/</link>
      <pubDate>Sun, 01 Jan 2017 00:56:42 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2017/01/01/golangfmt/</guid>
      <description>Go语言的标准输出流在打印到屏幕时有些参数跟别的语言（比如C#和Java）不同，下面是我整理的一些常用的格式化输入操作。 General %v 以默认的方式打印</description>
    </item>
    
    <item>
      <title>golang-Gin-Https</title>
      <link>http://blog.flywithme.top/2016/12/26/golang-Gin-Https/</link>
      <pubDate>Mon, 26 Dec 2016 14:29:14 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2016/12/26/golang-Gin-Https/</guid>
      <description>关于https 背景知识 密码学的一些基本知识 大致上分为两类，基于key的加密算法与不基于key的加密算法。现在的算法基本都是基于key的，ke</description>
    </item>
    
    <item>
      <title>TableView 中 Cell的重用机制分析</title>
      <link>http://blog.flywithme.top/2016/12/20/dequeueReusableCell/</link>
      <pubDate>Tue, 20 Dec 2016 11:41:34 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2016/12/20/dequeueReusableCell/</guid>
      <description>UItableView 是我们经常会用到的一个数据列表展示控件, 其 Cell 复用api更是我们要经常用到的 这个方法到底是怎么实现的呢? [tableView dequeueReusableCe</description>
    </item>
    
    <item>
      <title>JS判断客户端类型</title>
      <link>http://blog.flywithme.top/2016/12/19/clientType/</link>
      <pubDate>Mon, 19 Dec 2016 14:30:21 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2016/12/19/clientType/</guid>
      <description>通过浏览器的userAgent,使用JS判断客户端、浏览器、操作系统类型 扫描二维码打开: 测试链接: function is_weixn(){ var ua = navigator.userAgent.toLowerCase(); if(ua.match(/MicroMessenger/i)==&amp;quot;micromessenger&amp;quot;) { alert(&#39;在微信里打开</description>
    </item>
    
    <item>
      <title>iOS 开发Debug工具壳</title>
      <link>http://blog.flywithme.top/2016/07/14/debugpanel/</link>
      <pubDate>Thu, 14 Jul 2016 11:40:29 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2016/07/14/debugpanel/</guid>
      <description>初衷 移动端开发的时候总会遇到需要切换设备环境,或者切换服务器环境,或者查看一些测试 Log的时候. 这个时候免不了需要调取一下设备信息, 所以就想</description>
    </item>
    
    <item>
      <title>golang-gin 框架学习 一、 GET POST Method</title>
      <link>http://blog.flywithme.top/2016/06/30/Go-gin01/</link>
      <pubDate>Thu, 30 Jun 2016 18:16:12 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2016/06/30/Go-gin01/</guid>
      <description>前言 一直想学一些新的东西,自从接触了 Go 语言,然后学了一些基本语法,但是基本上还是停留在知道这么个语言的阶段,没有深入的了解过. 所以就选了一个</description>
    </item>
    
    <item>
      <title>iOS 自定义 Log 简介</title>
      <link>http://blog.flywithme.top/2016/05/27/Dlog-Introduce/</link>
      <pubDate>Fri, 27 May 2016 10:46:06 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2016/05/27/Dlog-Introduce/</guid>
      <description>我们在调试程序的时候，往往需要输出一些日志信息，用到NSLog函数，当我们准备发布程序，需要注释掉NSLog代码，这个时候往往会定义一个宏，</description>
    </item>
    
    <item>
      <title>singnal 信号类型</title>
      <link>http://blog.flywithme.top/2016/06/14/singnal/</link>
      <pubDate>Sun, 15 May 2016 17:26:11 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2016/06/14/singnal/</guid>
      <description>简介 处理一些 crash 需要查到这些资料 信号是Linux编程中非常重要的部分，本文将详细介绍信号机制的基本概念、Linux对信号机制的大致实现方法、如</description>
    </item>
    
    <item>
      <title>Objective-C&#43;Runtime 浅析</title>
      <link>http://blog.flywithme.top/2016/03/24/OCRuntime/</link>
      <pubDate>Thu, 24 Mar 2016 10:58:29 +0800</pubDate>
      
      <guid>http://blog.flywithme.top/2016/03/24/OCRuntime/</guid>
      <description>From 一、什么是Objective-C Runtime? Objective-C是动态语言, 而Runtime可以说是Objective-C的灵魂。简单来说，Obj</description>
    </item>
    
  </channel>
</rss>