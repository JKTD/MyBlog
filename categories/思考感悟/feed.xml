<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>思考感悟 on JKCoder&#39;s Blog </title>
        <link>http://blog.flywithme.top/categories/%E6%80%9D%E8%80%83%E6%84%9F%E6%82%9F/</link>
        <language>zh-CN</language>
        <author>Brasbug</author>
        <rights>Copyright (c) 2016, Brasbug; all rights reserved.</rights>
        <updated>Sun, 12 Jun 2016 15:14:43 CST</updated>
        
        <item>
            <title>YYModel 简介与使用</title>
            <link>http://blog.flywithme.top/2016/06/12/modelExt/</link>
            <pubDate>Sun, 12 Jun 2016 15:14:43 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://blog.flywithme.top/2016/06/12/modelExt/</guid>
            <description>

&lt;h5 id=&#34;1-简单的-json-与-model-的转换:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;1. 简单的 JSON 与 Model 的转换&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;// JSON:
{
    &amp;quot;uid&amp;quot;:123456,
    &amp;quot;name&amp;quot;:&amp;quot;Harry&amp;quot;,
    &amp;quot;created&amp;quot;:&amp;quot;1965-07-31T00:00:00+0000&amp;quot;
}

// Model:
@interface User : NSObject
@property UInt64 uid;
@property NSString *name;
@property NSDate *created;
@end
@implementation User
@end

// 从 JSON 转为 Model:
User *user = [User yy_modelWithJSON:json];

//从 Model 转为 JSON:
NSDictionary *json = [user yy_modelToJSONObject];
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;如果 Model 属性的类型和 JSON 中的类型不一样，YYModel 会自动进行如下转换:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;table&gt;
       &lt;thead&gt;
         &lt;tr&gt;
           &lt;th width=&#34;35%&#34;&gt;JSON/Dictionary&lt;/th&gt;
           &lt;th&gt;Model&lt;/th&gt;
         &lt;/tr&gt;
       &lt;/thead&gt;
       &lt;tbody&gt;
         &lt;tr&gt;
           &lt;td&gt;NSString&lt;/td&gt;
           &lt;td&gt;NSURL,SEL,Class&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSString&lt;/td&gt;
           &lt;td&gt;
   NSDate parsed with these formats:          &lt;br/&gt;
   yyyy-MM-dd          &lt;br/&gt;
   yyyy-MM-dd HH:mm:ss          &lt;br/&gt;
   yyyy-MM-dd&amp;rsquo;T&amp;rsquo;HH:mm:ss          &lt;br/&gt;
   yyyy-MM-dd&amp;rsquo;T&amp;rsquo;HH:mm:ssZ          &lt;br/&gt;
   EEE MMM dd HH:mm:ss Z yyyy        &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSDate&lt;/td&gt;
           &lt;td&gt;NSString (formatted with ISO8601)&amp;quot;YYYY-MM-dd&amp;rsquo;T&amp;rsquo;HH:mm:ssZ&amp;quot;        &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSString/NSNumber&lt;/td&gt;
           &lt;td&gt;C number (BOOL,int,float,NSUInteger,UInt64,&amp;hellip;)NaN and Inf will be ignored        &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSNumber&lt;/td&gt;
           &lt;td&gt;NSString (NSNumber.stringValue)&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSValue&lt;/td&gt;
           &lt;td&gt;struct (CGRect,CGSize,&amp;hellip;)&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSNull&lt;/td&gt;
           &lt;td&gt;nil,0&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;&amp;quot;null&amp;quot;,&amp;quot;nil&amp;quot;,&amp;quot;no&amp;quot;,&amp;quot;false&amp;quot;,&amp;hellip;&lt;/td&gt;
           &lt;td&gt;nil,0&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;&amp;quot;YES&amp;quot;,&amp;quot;yes&amp;quot;,&amp;quot;true&amp;quot;,&amp;hellip;&lt;/td&gt;
           &lt;td&gt;@(YES)&lt;/td&gt;
         &lt;/tr&gt;
       &lt;/tbody&gt;
     &lt;/table&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果自动转换不能完成，则相应属性会被忽略。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;2-将-model-的属性匹配到指定的-json-nsdictionary-键值:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;2. 将 Model 的属性匹配到指定的 JSON/NSDictionary 键值：&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;// JSON:
{
    &amp;quot;n&amp;quot;:&amp;quot;Harry Pottery&amp;quot;,
    &amp;quot;p&amp;quot;: 256,
    &amp;quot;ext&amp;quot; : {
        &amp;quot;desc&amp;quot; : &amp;quot;A book written by J.K.Rowing.&amp;quot;
    }
}

// Model:
@interface Book : NSObject
@property NSString *name;
@property NSInteger page;
@property NSString *desc;
@end
@implementation Book
+ (NSDictionary *)modelCustomPropertyMapper {
    return @{@&amp;quot;name&amp;quot; : @&amp;quot;n&amp;quot;,
    @&amp;quot;page&amp;quot; : @&amp;quot;p&amp;quot;,
    @&amp;quot;desc&amp;quot; : @&amp;quot;ext.desc&amp;quot;};
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;通过实现 协议中的 modelCustomPropertyMapper，可以将 Model 属性的名字对应到 JSON/NSDictionary 相应的字段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;3-model-属性关联到其他-model:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;3. Model 属性关联到其他 Model&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;// JSON:
{
    &amp;quot;author&amp;quot;:{
        &amp;quot;name&amp;quot;:&amp;quot;J.K.Rowling&amp;quot;,
        &amp;quot;birthday&amp;quot;:&amp;quot;1965-07-31T00:00:00+0000&amp;quot;
    },
    &amp;quot;name&amp;quot;:&amp;quot;Harry Potter&amp;quot;,
    &amp;quot;pages&amp;quot;:256
}

// Model:
@interface Author : NSObject
@property NSString *name;
@property NSDate *birthday;
@end
@implementation Author
@end

@interface Book : NSObject
@property NSString *name;
@property NSUInteger pages;
@property Author *author;
@end
@implementation Book
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;默认什么都不用做，YYModel 就可以自动转换。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;4-model-属性是容器类型:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;4. Model 属性是容器类型&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@class Shadow, Border, Attachment;

@interface Attributes
@property NSString *name;
@property NSArray *shadows;
@property NSSet *borders;
@property NSMutableDictionary *attachments;
@end

@implementation Attributes
+ (NSDictionary *)modelContainerPropertyGenericClass {
    return @{@&amp;quot;shadows&amp;quot; : [Shadow class],
             @&amp;quot;borders&amp;quot; : Border.class,
             @&amp;quot;attachments&amp;quot; : @&amp;quot;Attachment&amp;quot; };
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;通过实现 协议中的 modelContainerPropertyGenericClass，返回 Model 属性容器中需要存放的对象类型，YYModel 会自动进行处理。对象类型可以是 Class 或者 Class name。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;5-黑名单白名单:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;5. 黑名单白名单&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@interface User
@property NSString *name;
@property NSUInteger age;
@end

@implementation Attributes
+ (NSArray *)modelPropertyBlacklist {
    return @{@&amp;quot;test1&amp;quot;, @&amp;quot;test2&amp;quot;};
}
+ (NSArray *)modelPropertyWhitelist {
    return @{@&amp;quot;name&amp;quot;};
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;如果一个 Model 需要忽略某些属性，则可以通过实现 协议中的 modelPropertyBlacklist 来返回属性名列表，YYModel 会在处理过程中忽略这些属性。&lt;/p&gt;

&lt;p&gt;如果一个 Model 只需要处理某些特性的属性，则可以通过实现 协议中的 modelPropertyWhitelist 来返回属性名列表，YYModel 在处理中只会处理列表内的属性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;6-数据校验与额外的处理:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;6. 数据校验与额外的处理&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@interface User
@property NSString *name;
@property NSDate *createdAt;
@end

@implementation User
- (BOOL))modelCustomTransformFromDictionary:(NSDictionary *)dic {
    NSNumber *timestamp = dic[@&amp;quot;timestamp&amp;quot;];
    if (![timestamp isKindOfClass:[NSNumber class]]) return NO;
    _createdAt = [NSDate dateWithTimeIntervalSince1970:timestamp.floatValue];
    return YES;
}

- (BOOL)modelCustomTransformToDictionary:(NSMutableDictionary *)dic {
    if (!_createdAt) return NO;
    dic[@&amp;quot;timestamp&amp;quot;] = @(n.timeIntervalSince1970);
    return YES;
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;果一个 Model 需要校验数据有效性，可以通过实现 协议中的 modelCustomTransformFromDictionary 或 modelCustomTransformToDictionary 方法来完成。如果数据校验失败，则可以返回 NO，YYModel 会忽略这个 Model。&lt;/p&gt;

&lt;p&gt;在上面两个方法中，也可以对 Model/JSON 进行额外的处理，以转换 YYModel 不支持的类型。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;6-coding-copying-hash-equal:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;6.Coding/Copying/hash/equal&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@interface YYShadow :NSObject &amp;lt;NSCoding, NSCopying&amp;gt;
@property (nonatomic, copy) NSString *name;
@property (nonatomic, assign) CGSize size;
@end

@implementation YYShadow
- (void)encodeWithCoder:(NSCoder *)aCoder { [self yy_modelEncodeWithCoder:aCoder]; }
- (id)initWithCoder:(NSCoder *)aDecoder { return [self yy_modelInitWithCoder:aDecoder]; }
- (id)copyWithZone:(NSZone *)zone { return [self yy_modelCopy]; }
- (NSUInteger)hash { return [self yy_modelHash]; }
- (BOOL)isEqual:(id)object { return [self yy_modelIsEqual:object]; }
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;在一个对象的实现中，调用 YYModel 对应的方法，即可实现 NSCoding/NSCopying/hash/equal 协议。YYModel 会自动处理所有有效的 property。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;最后:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;最后&lt;/h6&gt;

&lt;p&gt;YYModel 的设计目标是高性能和高容错性，虽然功能并不如 Mantle 等项目丰富，但是性能却是远远高于它们。上面所有的方法内部都经过仔细检查，能确保每个属性类型的正确性，避免了可能的崩溃问题。&lt;/p&gt;

&lt;p&gt;from:YYModel作者&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>iOS 自定义 Log 简介</title>
            <link>http://blog.flywithme.top/2016/05/27/Dlog-Introduce/</link>
            <pubDate>Fri, 27 May 2016 10:46:06 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://blog.flywithme.top/2016/05/27/Dlog-Introduce/</guid>
            <description>&lt;p&gt;我们在调试程序的时候，往往需要输出一些日志信息，用到NSLog函数，当我们准备发布程序，需要注释掉NSLog代码，这个时候往往会定义一个宏，在调试的时候，会输出日志，在Release正式版本的时候，会关闭日志输出。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#ifdef DEBUG
# define DLog(fmt, ...) NSLog((@&amp;quot;[FileName:%s]\n&amp;quot; &amp;quot;[FuctionName:%s]\n&amp;quot; &amp;quot;[Line:%d] \n&amp;quot; fmt), __FILE__, __FUNCTION__, __LINE__, ##__VA_ARGS__);
#else
# define DLog(...);
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://7xsdes.com1.z0.glb.clouddn.com/image/blogDlog.png&#34; alt=&#34;dog&#34; /&gt;&lt;/p&gt;

&lt;p&gt;参数解释：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VA_ARGS&lt;/strong&gt;是一个可变参数的宏，很少人知道这个宏，这个可变参数的宏是新的C99规范中新增的，目前似乎只有gcc支（VC6.0的编译器不支持）。宏前面加上##的作用在于，当可变参数的个数为0时，这里的##起到把前面多余的&amp;rdquo;,&amp;ldquo;去掉的作用,否则会编译出错, 你可以试试。&lt;a href=&#34;http://stackoverflow.com/questions/21873616/how-to-use-va-args-properly&#34;&gt;stackOverflow&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;FILE&lt;/strong&gt;宏在预编译时会替换成当前的源文件名&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;LINE&lt;/strong&gt;宏在预编译时会替换成当前的行号&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;FUNCTION&lt;/strong&gt;宏在预编译时会替换成当前的函数名称&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有了以上这几个宏，特别是有了&lt;strong&gt;VA_ARGS&lt;/strong&gt;，调试信息的输出就变得灵活多了。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
