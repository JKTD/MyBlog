<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>技术文章 on JKCoder&#39;s Blog</title>
        <link>http://www.flywithme.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/</link>
        <language>zh-CN</language>
        <author>Brasbug</author>
        <rights>Copyright (c) 2016, Brasbug; all rights reserved.</rights>
        <updated>Fri, 17 Feb 2017 17:34:01 CST</updated>
        
        <item>
            <title>逻辑控制</title>
            <link>http://www.flywithme.top/2017/02/17/swift05/</link>
            <pubDate>Fri, 17 Feb 2017 17:34:01 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2017/02/17/swift05/</guid>
            <description>&lt;p&gt;控制流的三种基本结构:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;顺序结构&lt;/strong&gt;:  顺序语句有语句序列组成,程序执行时,按照语句顺序,从上而下,一条一条顺序执行&lt;br /&gt;
 &lt;strong&gt;循环结构&lt;/strong&gt;   循环语句使用同一个语句组根据一定的条件执行若干次&lt;br /&gt;
 &lt;strong&gt;选择结构&lt;/strong&gt;:  分支语句根据一定的条件决定执行那一部分语句序列
顺序结构不再多说&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;循环结构&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for _ in 0...100{
    print(&amp;quot;遍历循环&amp;quot;) 
}


//这种方式在 swift3 中被废弃,不能在使用
//for var i = 1; i &amp;lt; 100 ; i++{
//    print(&amp;quot;遍历循环中&amp;quot;)
//}


var a = 0.0
while a &amp;lt; 50 {
    a += 0.5
    sin(a)   
}


//至少执行一次
repeat{
    a += 0.5
    sin(a)
}while a &amp;lt; 100


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;选择结构&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if true {


}else if(1 == 1){


}else{


}


switch index {
case 0:
    break
case 1:
    break
case 2:
    break
default: break
}


//swift 提供的基础数据类型都可以用作 switch 的判断
var str = &amp;quot;a&amp;quot;
switch str {
case &amp;quot;a&amp;quot;,&amp;quot;A&amp;quot;:
    print(&amp;quot;A&amp;quot;)
case &amp;quot;b&amp;quot;:
    print(&amp;quot;B&amp;quot;)
default:
    break


}


//区间
let age = 19
switch age {
case 0..&amp;lt;18:
    print(&amp;quot;未成年&amp;quot;)
case 18..&amp;lt;30:
    print(&amp;quot;青年&amp;quot;)
case 30..&amp;lt;60:
    print(&amp;quot;壮年&amp;quot;)
default:
     break
}


//元组    
let point = (5, 2)


switch point {
case (0,0):
    print(&amp;quot;原点&amp;quot;)
case (0,1):
    print(&amp;quot;1&amp;quot;)
case (0,2):
    print(&amp;quot;2&amp;quot;)
case (_,2): //可以忽略某一个维度的值
    print(&amp;quot;_ 2&amp;quot;)
case (-10...10,2...5): //元组中,同样可以使用区间
    print(&amp;quot;_ 2&amp;quot;)
default:
    print(&amp;quot;没找到&amp;quot;)
}


//解包
let point1 = (5, 2)
switch point1 {
case (0,0):
    print(&amp;quot;原点&amp;quot;)
case (let x,0):
    print(&amp;quot;x 轴 \(x)&amp;quot;)
case (0,let y):
    print(&amp;quot;y 轴  \(y)&amp;quot;)
case (let x, let y):
    print(&amp;quot;x = \(x), y = \(y)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;控制转移&lt;/strong&gt;   &lt;code&gt;break&lt;/code&gt; 跳出本层循环体,提前结束循环 。   &lt;code&gt;continue&lt;/code&gt; 结束当前循环体,进行下一次循环   &lt;code&gt;fallthrough&lt;/code&gt; 执行完当前case 之后 进入下一个 case&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while true {
    a += 0.5
    if a == 5.5{
        continue
    }
    sin(a)
    if a &amp;gt; 50{
        break
    }
}

var str = &amp;quot;a&amp;quot;
switch str {
case &amp;quot;a&amp;quot;,&amp;quot;A&amp;quot;:
    print(&amp;quot;A&amp;quot;)
    fallthrough //执行完之后 ,跳入下一个 case 语句
case &amp;quot;b&amp;quot;:
    print(&amp;quot;B&amp;quot;)
    fallthrough //执行完之后 ,跳入下一个 case 语句
default:
    print(&amp;quot;C&amp;quot;)
}

```
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>Swift 基础运算符</title>
            <link>http://www.flywithme.top/2017/02/17/swift04/</link>
            <pubDate>Fri, 17 Feb 2017 11:00:55 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2017/02/17/swift04/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;赋值运算符&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;=&lt;/strong&gt;  这里是没有返回值的。返回值可能是Void，此时不等于nil，即赋值成功；或等于nil，即赋值失败&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = 3  
a = 2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数学运算符  &lt;code&gt;+ - * / +=  -= %&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = 201
var b  = 4
a + b
a * b
a - b
a / b
a % b
a += 1
+a
-a
a += 2
a -= 3
a *= 2
a /= 2
a %= 2    


var u = 2.5.truncatingRemainder(dividingBy: 1.2) //小数求余


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;逻辑运算符  &lt;code&gt;! &amp;amp;&amp;amp; ||&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var isTrue:Bool = true , isFalse:Bool = false
!isTrue
isTrue &amp;amp;&amp;amp; isFalse
isTrue || isFalse
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;比较运算符   &lt;code&gt;== != &amp;gt; &amp;gt;= &amp;lt; &amp;lt;=&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let money = 100
let price = 20
if money &amp;gt;= price{
    print(&amp;quot;buy&amp;quot;)
}


let capacity = 30 //背包容量
let volume = 40 //购买物体积


if money &amp;gt;= price &amp;amp;&amp;amp; capacity &amp;gt;= volume{
    print(&amp;quot;buy it&amp;quot;)
}


if money &amp;lt; price || capacity &amp;lt; volume{
    print(&amp;quot;can not buy it&amp;quot;)
}


if  !(money &amp;gt;= price &amp;amp;&amp;amp; capacity &amp;gt;= volume){
     print(&amp;quot;can not buy it&amp;quot;)
}


//登陆
var isUserNameOK = false
var isPasswordOk = false


var isPhoneNumOk = true
var isPhoneCodeOk = false


if isUserNameOK &amp;amp;&amp;amp; isPasswordOk || isPhoneNumOk &amp;amp;&amp;amp; isPasswordOk{
    print(&amp;quot;登陆成功&amp;quot;)
}else{
    print(&amp;quot;登陆失败&amp;quot;)
}


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;三目运算符   bool?answer1:answer2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var battery = 19
var batteryColor:UIColor
batteryColor =  battery &amp;lt;= 20 ? UIColor.red:UIColor.green
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;区间运算符  闭区间运算符 &lt;code&gt;[a, b] a...b&lt;/code&gt; , 前闭后开区间运算符 &lt;code&gt;[) a..&amp;lt;b&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for index in 1...10{
    index
}


for index in 1..&amp;lt;10{
        index
}


let arr = [&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;]
for str in arr{
    print(str)
}


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>Swift 基础类型</title>
            <link>http://www.flywithme.top/2017/02/16/swift03/</link>
            <pubDate>Thu, 16 Feb 2017 16:11:36 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2017/02/16/swift03/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;常量 &lt;strong&gt;let&lt;/strong&gt;&lt;br /&gt;
```
let a = 1
let b:Int
b = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;- 变量 **var**
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;var b = 2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    
 swift 是一个强类型语言:
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;var x = 1&lt;/p&gt;

&lt;p&gt;x = &amp;ldquo;abc&amp;rdquo; //会报错(Cannot assign value of type &amp;ldquo;String&amp;rdquo; to type &amp;ldquo;int&amp;rdquo;)
   ```&lt;/p&gt;

&lt;p&gt;显示声明变量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let s:String = &amp;quot;abc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一次声明多个变量,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var y, z, d:Double
var x = 1, y = 2, z = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;常用数据类型: Int , Float ,Double , Boolean , String ,Tuple&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Int&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
var aInt: Int = 20 //整型的存储空间是有限的,根据不同的计算机来定。有最大最小值
Int.max
Int.min

var aUInt:UInt = 200  //无法存储负数,最大值是 Int 的两倍+1
UInt.max
UInt.min
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Int 的类型
   !&lt;img src=&#34;sources/swift/Int类型.png&#34; alt=&#34;intType&#34; /&gt;&lt;/p&gt;

&lt;p&gt;小知识 如果是一个比较大的数值,可以使用下划线对数字进行分割&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let bigNum = 1_000_000_000_00232
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;sources/swift/BA6D5746-A4AE-411F-905E-4761288DEE0F.png&#34; alt=&#34;C8A54525-8DE7-4EC3-8665-89146D67C0CF&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Float Double&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;浮点数 float Double 区别&lt;br /&gt;
    &lt;img src=&#34;sources/swift/C1DB90FE-EE4F-4CC2-95F3-580D54437E75.png&#34; alt=&#34;C8A54525-8DE7-4EC3-8665-89146D67C0CF&#34; /&gt;&lt;/p&gt;

&lt;p&gt;//上面的数字加下划线 亦可以用在小数中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var aFloat = 1_000_000.000_0001  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不同数据类型之间不能直接做数据运算,不能自动做类型转换。必需要做显示类型转换,以防止运算出错。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let a:Int = 1
let b:UInt = 2
a + b //错误,运算歧义 
a + Int(b) //正确
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;swift 是一个强制类型语言,把浮点数赋值给整型是肯定会报错的。除非对浮点数进行转换才行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boolean&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let aTrue:Bool = true
let aFalse = false

if aTrue{
    print(&amp;quot;True&amp;quot;)
}else if(1 == 1){
    print(&amp;quot;1 == 1&amp;quot;)
}
else{
    print(&amp;quot;False&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if 判断语句 只能使用 Bool 类型判断,否则会报错&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tuple&lt;/strong&gt; 元组就是将多个不同的值集合在一个数据中。可以有任意多个值,多个不同的数据类型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var point = (1 , 1)
var httpResponse = (401, &amp;quot;未授权&amp;quot;)

// 显式指定元组类型
var point2:(Int, Int, Int) = (2, 3, 4)

var httpResponse2:(Int, String) = (200, &amp;quot;OK&amp;quot;)

//取值
httpResponse.0
httpResponse.1

//解包
let (x, y) = httpResponse2
print(x, y)

//给分量加一个名字。
let point3 = (x: 3, y :4)
point3.x
point3.y

let point4:(x: Int, y: Int) =(2, 3)
point4.x
point4.y

let point5 = (10,23)
let (z, _) = point5 //若不需要解包某一个数据,可以用下划线_忽略一些值
z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;String&lt;/strong&gt;   使用双引号引起来的一段文本。&lt;/p&gt;

&lt;p&gt;字符串基本用法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//声明一个字符串
var str: String = &amp;quot;swift&amp;quot;
let str1 = String(&amp;quot;abdd&amp;quot;)

//空字符串
var emptyStr = &amp;quot;&amp;quot;
var emptystr1 = String()

str.isEmpty //字符串判空

let a = &amp;quot;abc&amp;quot;
str + a 

str += a

str1 += a //错误 常量不能被改变

//字符串插值  字符串插值是一种全新的构建字符串的方式，可以在其中包含常量、变量、字面量和表达式。您插入的字符串字面量的每一项都被包裹在以反斜线为前缀的圆括号中：
let name  = &amp;quot;jack&amp;quot;
let age = 20
let s = &amp;quot;My name is \(name), age is \(age)&amp;quot;

// \是转义字符  \t 是制表符  \n 是换行符
let s2 = &amp;quot;\\&amp;quot; //输出转义字符
print(s2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字符串遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var str = &amp;quot;hello. swift&amp;quot;

for c in str.characters{
    print(c)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字符&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let mark:Character = &amp;quot;!&amp;quot; //字符

str + String(mark) //不改变 str 

str.append(mark) //改变 str 值
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 swift 中一个中文字符和表情符都可以是一个字符(其他语言中可能需要多个字符才能标识)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let dog:Character = &amp;quot;🐶&amp;quot;
let chinessLetter :Character = &amp;quot;程&amp;quot;
let coolguy: Character = &amp;quot;\u{1F60E}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字符串长度 :swift 更倾向于人类理解,而不是机器理解。  但是这会导致 swift 处理大批量字符串的时候速度比较慢&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var strLetters = &amp;quot;abcdef\u{1F60E}&amp;quot;
strLetters.characters.count //长度计算 为7
strLetters = &amp;quot;中国&amp;quot;
strLetters.characters.count //长度计算 为2

var cafe = &amp;quot;café&amp;quot;  //字符串长度是多少?

cafe = &amp;quot;cafe\u{0301}&amp;quot; //字符串长度是多少?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如何索引获取字符串中的字符   //这个处理几个版本变化很大&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var str = &amp;quot;hello, swift&amp;quot; 
let startIndex =  str.index(str.startIndex, offsetBy: 2) //距离起点字符偏移位置
str[startIndex] //
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字符串比较&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var varA   = &amp;quot;Hello, Swift!&amp;quot;
var varB   = &amp;quot;Hello, World!&amp;quot;

if varA == varB {
   print( &amp;quot;\(varA) 与 \(varB) 是相等的&amp;quot; )
} else {
   print( &amp;quot;\(varA) 与 \(varB) 是不相等的&amp;quot; )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字符串 filter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let str2 = &amp;quot;    a  b  c  d &amp;quot;
let res = String(str2.characters.filter  { $0 != &amp;quot; &amp;quot; })
res
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字符串插入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let c:Character = &amp;quot;1&amp;quot;
str.insert(c, at: startIndex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字符串大小写转换&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var str = &amp;quot;hello, swift&amp;quot;
let shouty = str.uppercased()
let shoutx = str.lowercased()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;判断字母首尾是否为某特定字符&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;str.hasPrefix(&amp;quot;hello&amp;quot;)
str.hasSuffix(&amp;quot;swift&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;强制类型转换  as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let s2 = NSString(format:&amp;quot;1/3 =  %.2f&amp;quot;, 1.0/3.0) as String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NSString&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let s3:NSString = &amp;quot;😄哈&amp;quot;
s3.length
s3.character(at: 1)
let s4 = &amp;quot;    hello world    &amp;quot; as NSString

s4.trimmingCharacters(in: .whitespaces) //去除空格
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>Swift 初见</title>
            <link>http://www.flywithme.top/2017/02/16/swift02/</link>
            <pubDate>Thu, 16 Feb 2017 11:27:44 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2017/02/16/swift02/</guid>
            <description>&lt;p&gt;首先我们来在屏幕上输出一个 &lt;code&gt;hello world&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&amp;quot;hello world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不需要 import 任何库,可以直接在全局作用域使用。代码结尾不要带分号。&lt;/p&gt;

&lt;p&gt;Xcode 提供了代码预览功能 &lt;strong&gt;Playground&lt;/strong&gt; . 使用它可以加快 swift的学习速度&lt;/p&gt;

&lt;p&gt;初始化一个变量和常量
    var  a = 2  //可变数据
    a = 3
    let b = 2 //不可变&lt;/p&gt;

&lt;p&gt;if else 雨晶
    if a == 2{
        print(&amp;ldquo;true&amp;rdquo;)
    } else{
       print(&amp;ldquo;false&amp;rdquo;)
    }&lt;/p&gt;

&lt;p&gt;for in 遍历语句(此外还有 ,repeat..while ,for 循环3.0中已经被弃用)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for index in 0...100{
   var c = Double(index)/20.0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;while&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while 1 == 1 {
    a += 1
    if a == 100{
        break
    }
    print(&amp;quot;do something&amp;quot;,a)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;repeat&amp;hellip; while&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repeat
{
    a += 1
    if a &amp;gt; 100{
        break
    }
    print(&amp;quot;do something&amp;quot;,a)

}while( 1 == 1 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;断言&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let age = -3 
assert(age &amp;gt;= 0, &amp;quot;A person&#39;s age cannot be less than zero&amp;quot;) 
// 因为 age &amp;lt; 0，所以断言会触发   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面开始深入学习&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>关于 Swift</title>
            <link>http://www.flywithme.top/2017/02/09/swift01/</link>
            <pubDate>Thu, 09 Feb 2017 10:12:48 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2017/02/09/swift01/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Swift 是一门新的编程语言，用于编写 iOS、OS X 以及 watchOS 应用程序。Swift 结合了 C 和 Objective-C 的优点并且不受C兼容性的限制。
Swift 使用安全的编程模式并添加了很多新特性，这将使编程更简单，扩展性更强，也更有趣。Swift 支持 Cocoa 和 Cocoa Touch 框架。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Swift 的开发从很久之前就开始了。为了给 Swift 打好基础，苹果公司改进了编译器，调试器和框架结构，让 Swift 使用自动引用计数（Automatic Reference Counting, ARC）来简化内存管理。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Objective-C 开发者对于 Swift 并不会感到陌生。它采用了 Objective-C 的命名参数以及动态对象模型，可以无缝对接到现有的 Cocoa 框架，并且可以兼容 Objective-C 代码。在此基础之上，Swift 还有许多新特性，支持面向过程编程和面向对象编程。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Swift 对于初学者来说也很简单。Swift是一门既满足工业标准又像脚本语言一样充满表现力和趣味的编程语言。Swift支持代码预览，这个革命性的特性可以允许程序员在不编译和运行应用程序的前提下运行 Swift 代码并实时查看结果。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 Swift编写 iOS，watchOS,macOS,和 tvOS apps 是一个极佳的选择。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Swift 3.0 是自 Swift开源以来第一个大的版本更新。从语言角度不兼容之前的版本。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;部分摘自：&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html&#34;&gt;AppleLibrary&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Go语言fmt包Printf方法详解t</title>
            <link>http://www.flywithme.top/2017/01/01/golangfmt/</link>
            <pubDate>Sun, 01 Jan 2017 00:56:42 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2017/01/01/golangfmt/</guid>
            <description>&lt;p&gt;Go语言的标准输出流在打印到屏幕时有些参数跟别的语言（比如C#和Java）不同，下面是我整理的一些常用的格式化输入操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%v 以默认的方式打印变量的值&lt;/li&gt;
&lt;li&gt;%T 打印变量的类型&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integer&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;%+d 带符号的整型，fmt.Printf(&amp;ldquo;%+d&amp;rdquo;, 255)输出+255&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;%q 打印单引号&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;%o 不带零的八进制&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;%#o 带零的八进制&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;%x 小写的十六进制&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;%X 大写的十六进制&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;%#x 带0x的十六进制&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;%U 打印Unicode字符&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;%#U 打印带字符的Unicode&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;%b 打印整型的二进制&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Integer width&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;%5d 表示该整型最大长度是5，下面这段代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fmt.Printf(&amp;quot;|%5d|&amp;quot;, 1)
fmt.Printf(&amp;quot;|%5d|&amp;quot;, 1234567)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;输出结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|    1|
|1234567|
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;%-5d则相反，打印结果会自动左对齐&lt;/li&gt;
&lt;li&gt;%05d会在数字前面补零。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Float&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%f (=%.6f) 6位小数点&lt;/li&gt;
&lt;li&gt;%e (=%.6e) 6位小数点（科学计数法）&lt;/li&gt;
&lt;li&gt;%g 用最少的数字来表示&lt;/li&gt;
&lt;li&gt;%.3g 最多3位数字来表示&lt;/li&gt;
&lt;li&gt;%.3f 最多3位小数来表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%s 正常输出字符串&lt;/li&gt;
&lt;li&gt;%q 字符串带双引号，字符串中的引号带转义符&lt;/li&gt;
&lt;li&gt;%#q 字符串带反引号，如果字符串内有反引号，就用双引号代替&lt;/li&gt;
&lt;li&gt;%x 将字符串转换为小写的16进制格式&lt;/li&gt;
&lt;li&gt;%X 将字符串转换为大写的16进制格式&lt;/li&gt;
&lt;li&gt;% x 带空格的16进制格式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;String Width&lt;/strong&gt; (以5做例子）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%5s 最小宽度为5&lt;/li&gt;
&lt;li&gt;%-5s 最小宽度为5（左对齐）&lt;/li&gt;
&lt;li&gt;%.5s 最大宽度为5&lt;/li&gt;
&lt;li&gt;%5.7s 最小宽度为5，最大宽度为7&lt;/li&gt;
&lt;li&gt;%-5.7s 最小宽度为5，最大宽度为7（左对齐）&lt;/li&gt;
&lt;li&gt;%5.3s 如果宽度大于3，则截断&lt;/li&gt;
&lt;li&gt;%05s 如果宽度小于5，就会在字符串前面补零&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Struct&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%v 正常打印。比如：{sam {12345 67890}}&lt;/li&gt;
&lt;li&gt;%+v 带字段名称。比如：{name:sam phone:{mobile:12345 office:67890}&lt;/li&gt;
&lt;li&gt;%#v 用Go的语法打印。比如main.People{name:”sam”, phone:main.Phone{mobile:”12345”, office:”67890”}}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Boolean&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%t 打印true或false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pointer&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%p 带0x的指针&lt;/li&gt;
&lt;li&gt;%#p 不带0x的指针&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>golang-Gin-Https</title>
            <link>http://www.flywithme.top/2016/12/26/golang-Gin-Https/</link>
            <pubDate>Mon, 26 Dec 2016 14:29:14 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2016/12/26/golang-Gin-Https/</guid>
            <description>&lt;p&gt;关于https&lt;br /&gt;
背景知识&lt;br /&gt;
密码学的一些基本知识&lt;br /&gt;
大致上分为两类，基于key的加密算法与不基于key的加密算法。现在的算法基本都是基于key的，key就以一串随机数数，更换了key之后，算法还可以继续使用。&lt;/p&gt;

&lt;p&gt;基于key的加密算法又分为两类，对称加密和不对称加密，比如DES,AES那种的，通信双方一方用key加密之后，另一方用相同的key进行反向的运算就可以解密。&lt;/p&gt;

&lt;p&gt;不对称加密比较著名的就是RSA,加密的时候有一个公钥和一个私钥，公钥是可以交给对方的，a给b发送信息，a用自己的私钥加密，b用a的公钥解密，反之，b给a发送信息，b用自己的私钥加密。&lt;/p&gt;

&lt;p&gt;在通信之前，需要经过一些握手的过程，双方交换公钥，这个就是key exchange的过程，https最开始的阶段就包含了这个key exchange的过程，大概原理是这样，有些地方还要稍微复杂一些。&lt;/p&gt;

&lt;p&gt;数字证书与CA&lt;br /&gt;
数字证书相当于是服务器的一个“身份证”，用于唯一标识一个服务器。一般而言，数字证书从受信的权威证书授权机构 (Certification Authority，证书授权机构)买来的（免费的很少），浏览器里面一般就内置好了一些权威的CA，在使用https的时候，只要是这些CA签发的证书，浏览器都是可以认证的，要是在与服务器通信的时候，收到一个没有权威CA认证的证书，就会报出提醒不受信任证书的错误，就像登录12306一样，但是也可以选择接受。&lt;/p&gt;

&lt;p&gt;在自己的一些项目中，通常是自己签发一个ca根证书，之后这个根证书签发一个server.crt，以及server.key给服务端，server.key是服务端的私钥，server.crt包含了服务端的公钥还有服务端的一些身份信息。在客户端和服务端通信的时候（特别是使用代码编写的客户端访问的时候），要指定ca根证书，作用就相当于是浏览器中内置的那些权威证书一样，用于进行服务端的身份检测。&lt;/p&gt;

&lt;p&gt;证书的格式：&lt;/p&gt;

&lt;p&gt;ca证书在为server.crt证书签名时候的大致流程参考这个(&lt;a href=&#34;http://www.tuicool.com/articles/aymYbmM)：&#34;&gt;http://www.tuicool.com/articles/aymYbmM)：&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;数字证书由两部分组成：&lt;/p&gt;

&lt;p&gt;1、C：证书相关信息（对象名称+过期时间+证书发布者+证书签名算法….）&lt;/p&gt;

&lt;p&gt;2、S：证书的数字签名 （由CA证书通过加密算法生成的）&lt;/p&gt;

&lt;p&gt;其中的数字签名是通过公式S = F(Digest&amp;copy;)得到的。&lt;/p&gt;

&lt;p&gt;Digest为摘要函数，也就是 md5、sha-1或sha256等单向散列算法，用于将无限输入值转换为一个有限长度的“浓缩”输出值。比如我们常用md5值来验证下载的大文件是否完整。大文件的内容就是一个无限输入。大文件被放在网站上用于下载时，网站会对大文件做一次md5计算，得出一个128bit的值作为大文件的摘要一同放在网站上。用户在下载文件后，对下载后的文件再进行一次本地的md5计算，用得出的值与网站上的md5值进行比较，如果一致，则大 文件下载完好，否则下载过程大文件内容有损坏或源文件被篡改。这里还有一个小技巧常常在机器之间copy或者下载压缩文件的时候也可以用md5sum的命令来进行检验，看看文件是否完整。&lt;/p&gt;

&lt;p&gt;F为签名函数。CA自己的私钥是唯一标识CA签名的，因此CA用于生成数字证书的签名函数一定要以自己的私钥作为一个输入参数。在RSA加密系统中，发送端的解密函数就是一个以私钥作为参数的函数，因此常常被用作签名函数使用。因此CA用私钥解密函数作为F，以CA证书中的私钥进行加密，生成最后的数字签名，正如最后一部分实践时候给出的证书生成过程，生成server.crt的时候需要ca.crt（包含根证书的信息）和ca.key（根证书的私钥）都加入进去。&lt;/p&gt;

&lt;p&gt;接收端接收服务端数字证书后，如何验证数字证书上携带的签名是这个CA的签名呢？当然接收端首先需要指定对应的CA，接收端会运用下面算法对数字证书的签名进行校验：
F&amp;rsquo;(S) ?= Digest&amp;copy;&lt;/p&gt;

&lt;p&gt;接收端进行两个计算，并将计算结果进行比对：&lt;/p&gt;

&lt;p&gt;1、首先通过Digest&amp;copy;，接收端计算出证书内容（除签名之外）的摘要，C的内容都是明文可以看到到的。&lt;/p&gt;

&lt;p&gt;2、数字证书携带的签名是CA通过CA密钥加密摘要后的结果，因此接收端通过一个解密函数F&amp;rsquo;对S进行“解密”。就像最开始介绍的那样，在RSA系统中，接收端使用CA公钥（包含在ca.crt中）对S进行“解密”，这恰是CA用私钥对S进行“加密”的逆过程。&lt;/p&gt;

&lt;p&gt;将上述两个运算的结果进行比较，如果一致，说明签名的确属于该CA，该证书有效，否则要么证书不是该CA的，要么就是中途被人篡改了。&lt;/p&gt;

&lt;p&gt;对于self-signed(自签发)证书来说，接收端并没有你这个self-CA的数字证书，也就是没有CA公钥，也就没有办法对数字证书的签名进行验证。因此如果要编写一个可以对self-signed证书进行校验的接收端程序的话，首先我们要做的就是建立一个属于自己的CA，用该CA签发我们的server端证书，之后给客户端发送信息的话，需要对这个根证书进行指定，之后按上面的方式进行验证。&lt;/p&gt;

&lt;p&gt;可以使用openssl x509 -text -in client.crt -noout 查看某个证书文件所包含的具体信息。&lt;/p&gt;

&lt;p&gt;HTTPS基本过程概述&lt;/p&gt;

&lt;p&gt;https协议是在http协议的基础上组成的secure的协议。主要功能包含一下两个方面:&lt;/p&gt;

&lt;p&gt;1 通信双方的身份认证&lt;/p&gt;

&lt;p&gt;2 通信双方的通信过程加密&lt;/p&gt;

&lt;p&gt;下面通过详细分析https的通信过程来解释这两个功能。&lt;/p&gt;

&lt;p&gt;具体参考这两个文章：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.fenesky.com/blog/2014/07/19/how-https-works.html&#34;&gt;http://www.fenesky.com/blog/2014/07/19/how-https-works.html&lt;/a&gt;
&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html&#34;&gt;http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1、client 发送 sayhello给server端，说明client所支持的加密套件，还有一个随机数1。
2、server 发送 sayhello给client端，端把server.crt发送给客户端,server.crt采用还有一个随机数2。
3、client端生成preMaster key 这个是随机数3，之后三个随机数结合在一起生成MasterSecret,之后生成session secret，使用指定的ca进行身份认证，就像之前介绍的那样，都正常的话，就切换到加密模式。
4、client端使用server.crt中的公钥对preMasterSecret进行加密，如果要进行双向认证的话，client端会把client.crt一并发送过去，server端接受到数据，解密之后，也有了三个随机数，采用同样的方式，三个随机数生成通信所使用的session secret。具体session secret的结构可以参考前面列出的两个博客。server端完成相关工作之后，会发一个ChangeCipherSpec给client，通知client说明自己已经切换到相关的加解密模式，之后发一段加密信息给client看是否正常。
5、client端解密正常，之后就可以按照之前的协议，使用session secret进行加密的通信了。&lt;/p&gt;

&lt;p&gt;整体看下，开始的时候建立握手的过程就是身份认证的过程，之后认证完毕之后，就是加密通信的过程了，https的两个主要做用就实现了。&lt;/p&gt;

&lt;p&gt;相关实践&lt;/p&gt;

&lt;p&gt;比较典型的证书生成的过程：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl genrsa -out ca.key 2048

#这里可以使用 -subj 不用进行交互 当然还可以添加更多的信息
openssl req -x509 -new -nodes -key ca.key -subj &amp;quot;/CN=zju.com&amp;quot; -days 5000 -out ca.crt

openssl genrsa -out server.key 2048

#这里的/cn可以是必须添加的 是服务端的域名 或者是etc/hosts中的ip别名
openssl req -new -key server.key -subj &amp;quot;/CN=server&amp;quot; -out server.csr

openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 5000
注意生成client端证书的时候，注意要多添加一个字段，golang的server端认证程序会对这个字段进行认证：

openssl genrsa -out client.key 2048

openssl req -new -key client.key -subj &amp;quot;/CN=client&amp;quot; -out client.csr

echo extendedKeyUsage=clientAuth &amp;gt; extfile.cnf

openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extfile extfile.cnf -out client.crt -days 5000 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;https客户端和服务端单向校验&lt;/p&gt;

&lt;p&gt;这部分参考了这个（&lt;a href=&#34;http://www.tuicool.com/articles/aymYbmM&#34;&gt;http://www.tuicool.com/articles/aymYbmM&lt;/a&gt;
），里面代码部分讲得比较细致。&lt;/p&gt;

&lt;p&gt;服务端采用证书，客户端采用普通方式访问：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//server端代码
package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;os&amp;quot;
)

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w,
        &amp;quot;Hi, This is an example of https service in golang!&amp;quot;)
}

func main() {
    http.HandleFunc(&amp;quot;/&amp;quot;, handler)
    //http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
    _, err := os.Open(&amp;quot;cert_server/server.crt&amp;quot;)
    if err != nil {
        panic(err)
    }
    http.ListenAndServeTLS(&amp;quot;:8081&amp;quot;, &amp;quot;cert_server/server.crt&amp;quot;,
        &amp;quot;cert_server/server.key&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;client端直接发请求，什么都不加，会报如下错误：&lt;/p&gt;

&lt;p&gt;2015/07/11 18:13:50 http: TLS handshake error from 10.183.47.203:58042: remote error: bad certificate
使用浏览器直接访问的话，之后点击信赖证书，这个时候就可以正常get到消息&lt;/p&gt;

&lt;p&gt;或者使用curl -k https:// 来经行访问，相当于忽略了第一步的身份验证的工作。
要是不加-k的话 使用curl -v 参数打印出来详细的信息，会看到如下的错误：&lt;/p&gt;

&lt;p&gt;curl: (60) SSL certificate problem: Invalid certificate chain
说明是认证没有通过，因为客户端这面并没有提供可以信赖的根证书来对服务端发过来的证书进行验，/CN使用的直接是ip地址，就会报下面的错误：&lt;/p&gt;

&lt;p&gt;Get &lt;a href=&#34;https://10.183.47.206:8081:&#34;&gt;https://10.183.47.206:8081:&lt;/a&gt; x509: cannot validate certificate for 10.183.47.206 because it doesn&amp;rsquo;t contain any IP SANs
最好是生成证书的时候使用域名，或者是在/etc/hosts中加上对应的映射。&lt;/p&gt;

&lt;p&gt;可以发送请求的客户端的代码如下，注意导入根证书的方式:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    //&amp;quot;io&amp;quot;
    //&amp;quot;log&amp;quot;
    &amp;quot;crypto/tls&amp;quot;
    &amp;quot;crypto/x509&amp;quot;
    //&amp;quot;encoding/json&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
    &amp;quot;net/http&amp;quot;
    //&amp;quot;strings&amp;quot;
)

func main() {
    //x509.Certificate.
    pool := x509.NewCertPool()
    //caCertPath := &amp;quot;etcdcerts/ca.crt&amp;quot;
    caCertPath := &amp;quot;certs/cert_server/ca.crt&amp;quot;

    caCrt, err := ioutil.ReadFile(caCertPath)
    if err != nil {
        fmt.Println(&amp;quot;ReadFile err:&amp;quot;, err)
        return
    }
    pool.AppendCertsFromPEM(caCrt)
    //pool.AddCert(caCrt)

    tr := &amp;amp;http.Transport{
        TLSClientConfig:    &amp;amp;tls.Config{RootCAs: pool},
        DisableCompression: true,
    }
    client := &amp;amp;http.Client{Transport: tr}

    resp, err := client.Get(&amp;quot;https://server:8081&amp;quot;)

    if err != nil {
        panic(err)
    }

    body, _ := ioutil.ReadAll(resp.Body)
    fmt.Println(string(body))
    fmt.Println(resp.Status)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用curl命令的话，就加上&amp;ndash;cacrt ca.crt证书，这样就相当于添加了可信赖的证书，身份认证的操作就可以成功了。&lt;/p&gt;

&lt;p&gt;比如生成服务端证书的时候/CN写的是server 那client发送的时候也发送给&lt;a href=&#34;https://server:8081就好，不过在本地的/etc/hosts中要加上对应的映射。&#34;&gt;https://server:8081就好，不过在本地的/etc/hosts中要加上对应的映射。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;客户端和服务端的双向校验：&lt;/p&gt;

&lt;p&gt;按照之前的方式，客户端生成证书，根证书就按之前的那个：
    openssl genrsa -out client.key 2048&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl req -new -key client.key -subj &amp;quot;/CN=client&amp;quot; -out client.csr

openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt -days 5000
server端代码进行改进，添加受信任的根证书。

// gohttps/6-dual-verify-certs/server.go
package main

import (
    &amp;quot;crypto/tls&amp;quot;
    &amp;quot;crypto/x509&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
    &amp;quot;net/http&amp;quot;
)

type myhandler struct {
}

func (h *myhandler) ServeHTTP(w http.ResponseWriter,
    r *http.Request) {
    fmt.Fprintf(w,
        &amp;quot;Hi, This is an example of http service in golang!\n&amp;quot;)
}

func main() {
    pool := x509.NewCertPool()
    caCertPath := &amp;quot;cert_server/ca.crt&amp;quot;

    caCrt, err := ioutil.ReadFile(caCertPath)
    if err != nil {
        fmt.Println(&amp;quot;ReadFile err:&amp;quot;, err)
        return
    }
    pool.AppendCertsFromPEM(caCrt)

    s := &amp;amp;http.Server{
        Addr:    &amp;quot;:8081&amp;quot;,
        Handler: &amp;amp;myhandler{},
        TLSConfig: &amp;amp;tls.Config{
            ClientCAs:  pool,
            ClientAuth: tls.RequireAndVerifyClientCert,
        },
    }

    err = s.ListenAndServeTLS(&amp;quot;cert_server/server.crt&amp;quot;, &amp;quot;cert_server/server.key&amp;quot;)
    if err != nil {
        fmt.Println(&amp;quot;ListenAndServeTLS err:&amp;quot;, err)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;客户端代码改进，发送的时候把指定client端的client.crt以及client.key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// gohttps/6-dual-verify-certs/client.go

package main

import (
    &amp;quot;crypto/tls&amp;quot;
    &amp;quot;crypto/x509&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
    &amp;quot;net/http&amp;quot;
)

func main() {
    pool := x509.NewCertPool()
    caCertPath := &amp;quot;certs/cert_server/ca.crt&amp;quot;

    caCrt, err := ioutil.ReadFile(caCertPath)
    if err != nil {
        fmt.Println(&amp;quot;ReadFile err:&amp;quot;, err)
        return
    }
    pool.AppendCertsFromPEM(caCrt)

    cliCrt, err := tls.LoadX509KeyPair(&amp;quot;certs/cert_server/client.crt&amp;quot;, &amp;quot;certs/cert_server/client.key&amp;quot;)
    if err != nil {
        fmt.Println(&amp;quot;Loadx509keypair err:&amp;quot;, err)
        return
    }

    tr := &amp;amp;http.Transport{
        TLSClientConfig: &amp;amp;tls.Config{
            RootCAs:      pool,
            Certificates: []tls.Certificate{cliCrt},
        },
    }
    client := &amp;amp;http.Client{Transport: tr}
    resp, err := client.Get(&amp;quot;https://server:8081&amp;quot;)
    if err != nil {
        fmt.Println(&amp;quot;Get error:&amp;quot;, err)
        return
    }
    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但实际上，这样是不行的，server端会报这样的错误：&lt;/p&gt;

&lt;p&gt;client&amp;rsquo;s certificate&amp;rsquo;s extended key usage doesn&amp;rsquo;t permit it to be used for client authentication
因为client的证书生成方式有一点不一样，向开始介绍的那样，goalng对于client端的认证要多一个参数，生成证书的时候，要加上一个单独的认证信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl genrsa -out client.key 2048

openssl req -new -key client.key -subj &amp;quot;/CN=client&amp;quot; -out client.csr

echo extendedKeyUsage=clientAuth &amp;gt; extfile.cnf

openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extfile extfile.cnf -out client.crt -days 5000 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就是多添加一个认证文件的信息，之后使用新的证书就可以实现双向认证了，这样只有那些持有被认证过的证书的客户端才能向服务端发送请求。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>TableView 中 Cell的重用机制分析</title>
            <link>http://www.flywithme.top/2016/12/20/dequeueReusableCell/</link>
            <pubDate>Tue, 20 Dec 2016 11:41:34 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2016/12/20/dequeueReusableCell/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;UItableView 是我们经常会用到的一个数据列表展示控件, 其 Cell 复用api更是我们要经常用到的
   这个方法到底是怎么实现的呢?&lt;br /&gt;
   &lt;code&gt;[tableView dequeueReusableCellWithIdentifier:CellIdentifier]&lt;/code&gt;由于苹果并没有开源,所以我就对这个
``的实现分析一下。&lt;br /&gt;
   UITableView 的显示和数据是分离的。 列表的实现并不是为每一个数据创建一个 Cell。 而是只创建屏幕可显示的最大个数的 Cell ,然后重用这些 cell,
   对 Cell 做单独的显示配置,来达到既不影响显示效果,又可以充分解约资源的目的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;重用实现分析:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;UITableView.m 中,应该会有两个数据元。 屏幕上已显示的数据源  NSMutableArray* visiableCells, 和一个待使用的可重用数据源 NSMutableDictionary * reusableCels;&lt;br /&gt;
   TableView 初始化之初,这两个数据都是空的。&lt;br /&gt;
   通过&lt;code&gt;[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier]&lt;/code&gt; 创建新的 cell,创建之后 数据会进入visiableCells 中
   当屏幕上的Cell 够用之后,会有一个 Cell  使用 key CellIdentifier 存 reusableTableCels 中,&lt;br /&gt;
   比如有20条数据,而屏幕上最多可以显示5条数据。 程序最开始的时候情况是这样的:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;用&lt;code&gt;[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier]&lt;/code&gt;创建5次cell，并给cell指定同样的重用标识(当然，可以为不同显示类型的cell指定不同的标识)。并且5个cell全部都加入到visiableCells数组，reusableCells为空&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;tableView向上滚动时,第一个 Cell1 会移出屏幕,并且第6个 Cell6 也初始化显示完成之后, 第一个 Cell1 会进入reusableCells中,而第6个 Cell6 会加入到 visiableCells中。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;tableView向下滚动时,如果在顶部,数据不会有变化,如果在中间,上下都屏幕外都有数据。 因为reusableCells中有数据,当需要时会把之前加入的 cell1 返回&lt;code&gt;[tableView dequeueReusableCellWithIdentifier:CellIdentifier]&lt;/code&gt;,并移出 reusableCells,移入visiableCells,底部的 Cell6移入 reusableCells ,这样就完成了重用逻辑。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;还有一些情况需要注意,并不是只有拖动的时候才会有以上逻辑,tableview 调用&lt;code&gt;reloadData&lt;/code&gt;的时候,&lt;code&gt;reloadRowsAtIndex&lt;/code&gt; 方法的时候也会,具体步骤,以后再分析。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>JS判断客户端类型</title>
            <link>http://www.flywithme.top/2016/12/19/clientType/</link>
            <pubDate>Mon, 19 Dec 2016 14:30:21 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2016/12/19/clientType/</guid>
            <description>&lt;p&gt;通过浏览器的userAgent,使用JS判断客户端、浏览器、操作系统类型&lt;/p&gt;

&lt;p&gt;扫描二维码打开:
  &lt;img src=&#34;http://www.flywithme.top/sources/localHtml/clientType01.png&#34; width = &#34;200&#34; height = &#34;200&#34; alt=&#34;二维码&#34; align=center /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.flywithme.top/sources/localhtml/clientType01/index.html&#34; target=&#34;_blank&#34;&gt;测试链接:&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function is_weixn(){
        var ua = navigator.userAgent.toLowerCase();
        if(ua.match(/MicroMessenger/i)==&amp;quot;micromessenger&amp;quot;) {
            alert(&#39;在微信里打开&#39;);
        } else {
            alert(&#39;不在微信里打开&#39;);
        }
    }

    is_weixn();



    //判断各个平台
    function detectOS() {
        var sUserAgent = navigator.userAgent;
        var isWin = (navigator.platform == &amp;quot;Win32&amp;quot;) || (navigator.platform == &amp;quot;Windows&amp;quot;);
        var isMac = (navigator.platform == &amp;quot;Mac68K&amp;quot;) || (navigator.platform == &amp;quot;MacPPC&amp;quot;) || (navigator.platform == &amp;quot;Macintosh&amp;quot;) || (navigator.platform == &amp;quot;MacIntel&amp;quot;);
        if (isMac) return &amp;quot;Mac&amp;quot;;
        var isUnix = (navigator.platform == &amp;quot;X11&amp;quot;) &amp;amp;&amp;amp; !isWin &amp;amp;&amp;amp; !isMac;
        if (isUnix) return &amp;quot;Unix&amp;quot;;
        var isLinux = (String(navigator.platform).indexOf(&amp;quot;Linux&amp;quot;) &amp;gt; -1);
        if (isLinux) return &amp;quot;Linux&amp;quot;;
        if (isWin) {
            var isWin2K = sUserAgent.indexOf(&amp;quot;Windows NT 5.0&amp;quot;) &amp;gt; -1 || sUserAgent.indexOf(&amp;quot;Windows 2000&amp;quot;) &amp;gt; -1;
            if (isWin2K) return &amp;quot;Win2000&amp;quot;;
            var isWinXP = sUserAgent.indexOf(&amp;quot;Windows NT 5.1&amp;quot;) &amp;gt; -1 || sUserAgent.indexOf(&amp;quot;Windows XP&amp;quot;) &amp;gt; -1;
            if (isWinXP) return &amp;quot;WinXP&amp;quot;;
            var isWin2003 = sUserAgent.indexOf(&amp;quot;Windows NT 5.2&amp;quot;) &amp;gt; -1 || sUserAgent.indexOf(&amp;quot;Windows 2003&amp;quot;) &amp;gt; -1;
            if (isWin2003) return &amp;quot;Win2003&amp;quot;;
            var isWinVista= sUserAgent.indexOf(&amp;quot;Windows NT 6.0&amp;quot;) &amp;gt; -1 || sUserAgent.indexOf(&amp;quot;Windows Vista&amp;quot;) &amp;gt; -1;
            if (isWinVista) return &amp;quot;WinVista&amp;quot;;
            var isWin7 = sUserAgent.indexOf(&amp;quot;Windows NT 6.1&amp;quot;) &amp;gt; -1 || sUserAgent.indexOf(&amp;quot;Windows 7&amp;quot;) &amp;gt; -1;
            if (isWin7) return &amp;quot;Win7&amp;quot;;
            var isWin10 = sUserAgent.indexOf(&amp;quot;Windows NT 10&amp;quot;) &amp;gt; -1 || sUserAgent.indexOf(&amp;quot;Windows 10&amp;quot;) &amp;gt; -1;
            if (isWin10) return &amp;quot;Win10&amp;quot;;
        }
        if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) {
            //alert(navigator.userAgent);
//            alert(&#39;这是IOS&#39;);
            return &amp;quot;iOS&amp;quot;
        } else if (/(Android)/i.test(navigator.userAgent)) {
            //alert(navigator.userAgent);
            return &amp;quot;Android&amp;quot;;
        }
        return &amp;quot;other&amp;quot;;
    }

    alert(detectOS());
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>iOS 开发Debug工具壳</title>
            <link>http://www.flywithme.top/2016/07/14/debugpanel/</link>
            <pubDate>Thu, 14 Jul 2016 11:40:29 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2016/07/14/debugpanel/</guid>
            <description>

&lt;h5 id=&#34;初衷:bccb225b752499f845bd206d74979637&#34;&gt;初衷&lt;/h5&gt;

&lt;p&gt;移动端开发的时候总会遇到需要切换设备环境,或者切换服务器环境,或者查看一些测试 Log的时候. 这个时候免不了需要调取一下设备信息, 所以就想做一个固定在状态栏上的的
 Debug 功能控件,之前公司也有一个旧的类似控件,但是里面牵连业务非常多,而且扩展也不友好,所以我就想趁着有新项目需求的时候写一个顶部的控件壳子,
 而且可以很方便的扩展方法,当然,需要的测试方法依然需要开发者手动添加,这个控件并不侵入业务,以后如果有需要可以做一些设备基础功能的公用方法.
 暂时这个工具只有一个非常简单的工具壳,使用起来应该也不算麻烦.下面是使用方法&lt;/p&gt;

&lt;p&gt;效果如下图:
  &lt;img src=&#34;http://www.flywithme.top/sources/DebugPanel/01.gif&#34; alt=&#34;01&#34; /&gt;&lt;/p&gt;

&lt;h6 id=&#34;使用方法:bccb225b752499f845bd206d74979637&#34;&gt;使用方法&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Podfile&lt;/strong&gt;&lt;br /&gt;
   To integrate DebugPanel into your Xcode project using CocoaPods, specify it in your Podfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; source &#39;https://github.com/CocoaPods/Specs.git&#39;
 platform :ios, &#39;7.0&#39;
 target &#39;TargetName&#39; do
 pod &#39;DebugPanel&#39;  , :git =&amp;gt;&#39;https://github.com/brasbug/DebugPanel.git&#39;
 end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then ,runthe following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;参数说明:&lt;/strong&gt;&lt;br /&gt;
   &lt;code&gt;MTADebugModel&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /**
  *  @author Jack, 16-07-14 12:07:12
  *
  *  title: 显示名称
  *  selectorProperty: 调用的方法名
  *  etc: 额外参数
  */
  @property (nonatomic, strong) NSString *title;
  @property (nonatomic, strong) NSDictionary *etc;
  @property (nonatomic, strong) NSString *selectorProperty;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MTADebugMethodBridge&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//在方法调用的时候根据传入的参数生成相应的 selector 
- (BOOL)handleSelectorProperty:(MTADebugModel *)modelProperty
{
    if (modelProperty &amp;amp;&amp;amp; modelProperty.title &amp;amp;&amp;amp; modelProperty.selectorProperty.length) {
        SEL selector = [self selectorForMethod:modelProperty.selectorProperty];
        if (!selector || ![self respondsToSelector:selector]) {
            return NO;
        }
#pragma clang diagnostic push
#pragma clang diagnostic ignored &amp;quot;-Warc-performSelector-leaks&amp;quot;
        [self performSelector:selector withObject:modelProperty];
        NSLog(@&amp;quot;%@&amp;quot;,modelProperty);
#pragma clang diagnostic pop
        return YES;
    }
    return NO;
}
//生成相应的方法
- (SEL)selectorForMethod:(NSString *)method {
    if ([method length] == 0) return nil;
    NSString *objcMethod = [[@&amp;quot;debugapi_&amp;quot; stringByAppendingString:method] stringByAppendingString:@&amp;quot;:&amp;quot;];
    return NSSelectorFromString(objcMethod);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;br /&gt;
  如果需要在&lt;code&gt;didFinishLaunchingWithOptions&lt;/code&gt;或者是 rootiew 中启动,一定要使用`&lt;code&gt;performSelector&lt;/code&gt;方法延迟调用启动 debug 按钮&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//示例
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    // Override point for customization after application launch.
    [self performSelector:@selector(doJobsAfterFinishLaunching) withObject:nil afterDelay:0];
    return YES;
}

- (void)doJobsAfterFinishLaunching
{
    NSMutableArray *arrlist = [NSMutableArray array];

    MTADebugModel *item = [[MTADebugModel alloc]init];
    item.title = @&amp;quot;一键线上&amp;quot;;
    item.selectorProperty = @&amp;quot;changeOnlineServer&amp;quot;;
    item.etc = @{@&amp;quot;host&amp;quot;:@&amp;quot;http://www.baidu.com&amp;quot;};
    [arrlist addObject:item];

    item = [[MTADebugModel alloc]init];
    item.title = @&amp;quot;一键测试&amp;quot;;
    item.selectorProperty = @&amp;quot;changeTestServer&amp;quot;;
    item.etc = @{@&amp;quot;host&amp;quot;:@&amp;quot;http://www.sohu.com&amp;quot;};
    [arrlist addObject:item];

    item = [[MTADebugModel alloc]init];
    item.title = @&amp;quot;调试面板&amp;quot;;
    item.selectorProperty = @&amp;quot;showDebugPanel&amp;quot;;
    //    item.etc = @{@&amp;quot;a&amp;quot;:@&amp;quot;b&amp;quot;};
    [arrlist addObject:item];

    item = [[MTADebugModel alloc]init];
    item.title = @&amp;quot;打开 URL&amp;quot;;
    item.selectorProperty = @&amp;quot;OpenSchemeURL&amp;quot;;
    //    item.etc = @{@&amp;quot;c&amp;quot;:@&amp;quot;d&amp;quot;};
    [arrlist addObject:item];

    [[MTADebugpanel shareInstance]startDebugBar:YES methodModels:arrlist error:^(NSString *errMsg) {
        NSLog(@&amp;quot;%@&amp;quot;,errMsg);
    }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;这一步很重要&lt;/strong&gt;&lt;br /&gt;
   创建&lt;code&gt;MTADebugMethodBridge&lt;/code&gt;的 &lt;code&gt;category&lt;/code&gt; 实现你在 &lt;code&gt;MTADebugModel&lt;/code&gt; 中的&lt;code&gt;selectorProperty&lt;/code&gt; 参数方法,需要加上 &lt;code&gt;debugapi_&lt;/code&gt;的签名前缀&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//方法扩展示例
- (void)debugapi_changeOnlineServer:(MTADebugModel *)parameters{
// TODO  Do Your Job
}


- (void)debugapi_OpenSchemeURL:(MTADebugModel *)parameters{
    // TODO  Do Your Job
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>golang-gin 框架学习 一、 GET POST Method</title>
            <link>http://www.flywithme.top/2016/06/30/Go-gin01/</link>
            <pubDate>Thu, 30 Jun 2016 18:16:12 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2016/06/30/Go-gin01/</guid>
            <description>

&lt;h5 id=&#34;前言:2551b16abac86e66e05bae7b2b34a895&#34;&gt;前言&lt;/h5&gt;

&lt;p&gt;一直想学一些新的东西,自从接触了 Go 语言,然后学了一些基本语法,但是基本上还是停留在知道这么个语言的阶段,没有深入的了解过.&lt;br /&gt;
 所以就选了一个文档比较齐全的 Gin 来写我的第一个 webServer 项目.这只是一个 Demo ,写这个日志是为了记录自己的学习历程.激励下自己吧.&lt;/p&gt;

&lt;h6 id=&#34;gin-api:2551b16abac86e66e05bae7b2b34a895&#34;&gt;Gin API&lt;/h6&gt;

&lt;p&gt;搭建Web 服务器少不了要写 api 首先从最简单的 GET POST 开始.&lt;br /&gt;
 首先要初始化一个路由&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
    router := gin.Default()//初始化路由
    router.Run(&amp;quot;:8080&amp;quot;) // listen and GO on 0.0.0.0:8080
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;get-method:2551b16abac86e66e05bae7b2b34a895&#34;&gt;GET Method&lt;/h6&gt;

&lt;p&gt;这个最基本的网络请求在 gin 几行代码就可以搞定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router.GET(&amp;quot;/user/:name/:action&amp;quot;, func(c *gin.Context) {
        name := c.Param(&amp;quot;name&amp;quot;)
        action := c.Param(&amp;quot;action&amp;quot;)
        message := name + &amp;quot; is &amp;quot; + action
        c.String(http.StatusOK, message)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;client 使用方式如下图
 &lt;img src=&#34;sources/GoGin01/20160630-0.png&#34; alt=&#34;log1&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router.GET(&amp;quot;/welcome&amp;quot;, func(c *gin.Context) {
        firstname := c.DefaultQuery(&amp;quot;firstname&amp;quot;, &amp;quot;Guest&amp;quot;)
        lastname := c.Query(&amp;quot;lastname&amp;quot;) // shortcut for c.Request.URL.Query().Get(&amp;quot;lastname&amp;quot;)

        c.String(http.StatusOK, &amp;quot;Hello %s %s&amp;quot;, firstname, lastname)
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;client 使用方式如下图
  &lt;img src=&#34;sources/GoGin01/20160631-0.png&#34; alt=&#34;log1&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router.POST(&amp;quot;/form_post&amp;quot;, func(c *gin.Context) {
        message := c.PostForm(&amp;quot;message&amp;quot;)
        nick := c.DefaultPostForm(&amp;quot;nick&amp;quot;, &amp;quot;anonymous&amp;quot;)

        c.JSON(200, gin.H{
            &amp;quot;status&amp;quot;:  &amp;quot;posted&amp;quot;,
            &amp;quot;message&amp;quot;: message,
            &amp;quot;nick&amp;quot;:    nick,
        })
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;post-method:2551b16abac86e66e05bae7b2b34a895&#34;&gt;POST Method&lt;/h6&gt;

&lt;p&gt;一样只需要几行代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router.POST(&amp;quot;/post&amp;quot;, func(c *gin.Context) {

    id := c.Query(&amp;quot;postid&amp;quot;)
    page := c.DefaultQuery(&amp;quot;page&amp;quot;, &amp;quot;0&amp;quot;)
    name := c.PostForm(&amp;quot;name&amp;quot;)
    message := c.PostForm(&amp;quot;message&amp;quot;)

    fmt.Printf(&amp;quot;id: %s; page: %s; name: %s; message: %s&amp;quot;, id, page, name, message)

    c.JSON(200, gin.H{
        &amp;quot;status&amp;quot;:  &amp;quot;posted&amp;quot;,
        &amp;quot;id&amp;quot;: id,
        &amp;quot;page&amp;quot;:page,
        &amp;quot;name&amp;quot;:name,
        &amp;quot;message&amp;quot;:message,

    })
}) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;client 使用方式如下图
 &lt;img src=&#34;sources/GoGin01/20160631-1.png&#34; alt=&#34;log1&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type postForm1 struct {
        UserId     string `form:&amp;quot;userid&amp;quot; binding:&amp;quot;required&amp;quot;`
        Page string `form:&amp;quot;page&amp;quot; binding:&amp;quot;required&amp;quot;`
    }

    router.POST(&amp;quot;/post1&amp;quot;, func(c *gin.Context) {
        var form postForm1
        if c.Bind(&amp;amp;form) == nil{
            c.JSON(200,gin.H{
                &amp;quot;status&amp;quot;:200,
                &amp;quot;id&amp;quot;:form.UserId,
                &amp;quot;page&amp;quot;:form.Page,
            })
        }
        fmt.Printf(&amp;quot;id: %s &amp;quot;, form.UserId)
    }) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;client 使用方式如下图
  &lt;img src=&#34;sources/GoGin01/20160631-2.png&#34; alt=&#34;log1&#34; /&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>ReactiveCocoa简单介绍</title>
            <link>http://www.flywithme.top/2016/05/15/ReactiveCocoa/</link>
            <pubDate>Tue, 14 Jun 2016 14:33:00 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2016/05/15/ReactiveCocoa/</guid>
            <description>

&lt;h5 id=&#34;一-引入-reactivecocoa:28e95232603870e31ddfa6e2560a7d74&#34;&gt;一 引入 ReactiveCocoa&lt;/h5&gt;

&lt;p&gt;使用 pod 引入 选择自己需要的版本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &#39;ReactiveCocoa&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;二-使用-reactivecocoa:28e95232603870e31ddfa6e2560a7d74&#34;&gt;二 使用 ReactiveCocoa&lt;/h6&gt;

&lt;p&gt;下方会通过一些简单的实例来介绍一下信号量机制和一些常用的方法。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;引入相应的头文件,在工程中引入下方的头文件（建议在Pch文件中引入）就可以使用我们的ReactiveCocoa框架了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;lt;ReactiveCocoa/ReactiveCocoa.h&amp;gt;
#import &amp;lt;ReactiveCocoa/RACEXTScope.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sequence和Map&lt;br /&gt;
Sequence:队列，是ReactiveCocoa中引入的一个类型，它类似于数组，我们可以暂且把Sequence看做绑定信号量的数组吧。在OC中的NSArray可以通过rac_sequence方法转换成ReactiveCocoa中的Sequence，然后就可以调用处理信号的一些方法了。&lt;br /&gt;
参考以下实例代码：&lt;br /&gt;
   a. 把NSArray通过rac_sequence方法生成RAC中的Sequence&lt;br /&gt;
   b. 获取该Sequence对象的信号量&lt;br /&gt;
   c. 调用Signal的Map方法，使每个元素的首字母大写&lt;br /&gt;
   d. 通过subscribNext方法对其进行遍历输出   　　　&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//uppercaseString use map
- (void)uppercaseString {


    RACSequence *sequence = [@[@&amp;quot;you&amp;quot;, @&amp;quot;are&amp;quot;, @&amp;quot;beautiful&amp;quot;] rac_sequence];


    RACSignal *signal =  sequence.signal;


    RACSignal *capitalizedSignal = [signal map:^id(NSString * value) {
                               return [value capitalizedString];
                            }];


    [signal subscribeNext:^(NSString * x) {
        NSLog(@&amp;quot;signal --- %@&amp;quot;, x);
    }];


    [capitalizedSignal subscribeNext:^(NSString * x) {
        NSLog(@&amp;quot;capitalizedSignal --- %@&amp;quot;, x);
    }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下方截图是上个这个方法中的运行结果，从运行结果不难看出，通过Signal相应的方法处理完后，处理的结果会与新返回的信号量所绑定。原信号量中的值保持不变。每次信号量调用相应的方法处理完数据后，都会返回一个新的信号量，而这个信号量是独立于原信号量的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.flywithme.top/sources/reactivecocoa/blogreactivelog.png&#34; alt=&#34;reactivelog&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由上面的介绍可知，上面方法中的一坨代码可以写成下方的一串。因为一个方法调用后会返回一个持有新结果的新的信号量，然后在这个信号量的基础上再次调用信号量其他的方法。Signal还有其他一些好用的方法，用法和map方法类似，在此就不一一赘述了，gitHub上有相应的实例文档。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)uppercaseString {


    [[[@[@&amp;quot;you&amp;quot;, @&amp;quot;are&amp;quot;, @&amp;quot;beautiful&amp;quot;] rac_sequence].signal
     map:^id(NSString * value) {
        return [value capitalizedString];
    }] subscribeNext:^(id x) {
        NSLog(@&amp;quot;capitalizedSignal --- %@&amp;quot;, x);
    }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;信号量开关(Switch)&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面把信号量比喻成水管，那么Switch就是水龙头呢。通过Switch我们可以控制那个信号量起作用，并且可以在信号量之间进行切换。也可以这么理解，把Switch看成另一段水管，Switch对接那个水管，就流那个水管的水，这样比喻应该更为贴切一些。下方是一个关于Switch的一个小实例。&lt;/p&gt;

&lt;p&gt;(1) 首先创建3个自定义信号量（3个水管），前两个水管是用来接通不同的水源的(google, baidu), 而最后一个信号量是用来对接不同水源水管的水管（signalOfSignal）。signalOfSignal接baidu水管上，他就流baidu水源的水，接google水管上就流google水源的水。&lt;br /&gt;
   (2) 把signalOfSignal信号量通过switchToLatest方法加工成开关信号量。&lt;br /&gt;
   (3) 紧接着是对通过开关数据进行处理。&lt;br /&gt;
   (4) 开关对接baidu信号量，然后baidu和google信号量同时往水管里灌入数据，那么起作用的是baidu信号量。&lt;br /&gt;
   (5) 开关对接google信号量，google和baidu信号量发送数据，则google信号量输出到signalOfSignal中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//信号开关Switch
- (void)signalSwitch {
    //创建3个自定义信号
    RACSubject *google = [RACSubject subject];
    RACSubject *baidu = [RACSubject subject];
    RACSubject *signalOfSignal = [RACSubject subject];


    //获取开关信号
    RACSignal *switchSignal = [signalOfSignal switchToLatest];


    //对通过开关的信号量进行操作
    [[switchSignal  map:^id(NSString * value) {
        return [@&amp;quot;https//www.&amp;quot; stringByAppendingFormat:@&amp;quot;%@&amp;quot;, value];
    }] subscribeNext:^(NSString * x) {
        NSLog(@&amp;quot;%@&amp;quot;, x);
    }];


    //通过开关打开baidu
    [signalOfSignal sendNext:baidu];
    [baidu sendNext:@&amp;quot;baidu.com&amp;quot;];
    [google sendNext:@&amp;quot;google.com&amp;quot;];


    //通过开关打开google
    [signalOfSignal sendNext:google];
    [baidu sendNext:@&amp;quot;baidu.com/&amp;quot;];
    [google sendNext:@&amp;quot;google.com/&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码输出结果如下：&lt;br /&gt;
    &lt;img src=&#34;sources/reactivecocoa/blogreactivelog1.png&#34; alt=&#34;log1&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;信号量的合并&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;信号量的合并说白了就是把两个水管中的水合成一个水管中的水。但这个合并有个限制，当两个水管中都有水的时候才合并。如果一个水管中有水，另一个水管中没有水，那么有水的水管会等到无水的水管中来水了，在与这个水管中的水按规则进行合并。下面这个实例就是把两个信号量进行合并。&lt;/p&gt;

&lt;p&gt;(1) 首先创建两个自定义的信号量letters和numbers&lt;br /&gt;
   (2) 吧两个信号量通过combineLatest函数进行合并，combineLatest说明要合并信号量中最后发送的值&lt;br /&gt;
   (3) reduce块中是合并规则：把numbers中的值拼接到letters信号量中的值后边。&lt;br /&gt;
   (4) 经过上面的步骤就是创建所需的相关信号量，也就是相当于架好运输的管道。接着我们就可以通过sendNext方法来往信号量中发送值了，也就是往管道中进行灌水。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//组合信号
- (void)combiningLatest{
    RACSubject *letters = [RACSubject subject];
    RACSubject *numbers = [RACSubject subject];


    [[RACSignal
     combineLatest:@[letters, numbers]
     reduce:^(NSString *letter, NSString *number){
         return [letter stringByAppendingString:number];
     }]
     subscribeNext:^(NSString * x) {
         NSLog(@&amp;quot;%@&amp;quot;, x);
     }];


    //B1 C1 C2
    [letters sendNext:@&amp;quot;A&amp;quot;];
    [letters sendNext:@&amp;quot;B&amp;quot;];
    [numbers sendNext:@&amp;quot;1&amp;quot;];
    [letters sendNext:@&amp;quot;C&amp;quot;];
    [numbers sendNext:@&amp;quot;2&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面示例的运行输出结果如下：&lt;br /&gt;
   &lt;img src=&#34;sources/reactivecocoa/reactivelog2.png&#34; alt=&#34;log2&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;信号的合并（merge）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;信号合并就理解起来就比较简单了，merge信号量规则比较简单，就是把多个信号量，放入数组中通过merge函数来合并数组中的所有信号量为一个。类比一下，合并后，无论哪个水管中有水都会在merge产生的水管中流出来的。下方是merge信号量的代码：&lt;/p&gt;

&lt;p&gt;(1) 创建三个自定义信号量, 用于merge&lt;br /&gt;
   (2) 合并上面创建的3个信号量&lt;br /&gt;
   (3) 往信号里灌入数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//合并信号
- (void)merge {
    RACSubject *letters = [RACSubject subject];
    RACSubject *numbers = [RACSubject subject];
    RACSubject *chinese = [RACSubject subject];


    [[RACSignal
     merge:@[letters, numbers, chinese]]
     subscribeNext:^(id x) {
        NSLog(@&amp;quot;merge:%@&amp;quot;, x);
    }];


    [letters sendNext:@&amp;quot;AAA&amp;quot;];
    [numbers sendNext:@&amp;quot;666&amp;quot;];
    [chinese 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码运行结果如下：&lt;br /&gt;
  &lt;img src=&#34;sources/reactivecocoa/reactivelog3.png&#34; alt=&#34;log3&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
        <item>
            <title>YYModel 简介与使用</title>
            <link>http://www.flywithme.top/2016/06/12/modelExt/</link>
            <pubDate>Sun, 12 Jun 2016 15:14:43 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2016/06/12/modelExt/</guid>
            <description>

&lt;h5 id=&#34;1-简单的-json-与-model-的转换:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;1. 简单的 JSON 与 Model 的转换&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;// JSON:
{
    &amp;quot;uid&amp;quot;:123456,
    &amp;quot;name&amp;quot;:&amp;quot;Harry&amp;quot;,
    &amp;quot;created&amp;quot;:&amp;quot;1965-07-31T00:00:00+0000&amp;quot;
}

// Model:
@interface User : NSObject
@property UInt64 uid;
@property NSString *name;
@property NSDate *created;
@end
@implementation User
@end

// 从 JSON 转为 Model:
User *user = [User yy_modelWithJSON:json];

//从 Model 转为 JSON:
NSDictionary *json = [user yy_modelToJSONObject];
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;如果 Model 属性的类型和 JSON 中的类型不一样，YYModel 会自动进行如下转换:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;table&gt;
       &lt;thead&gt;
         &lt;tr&gt;
           &lt;th width=&#34;35%&#34;&gt;JSON/Dictionary&lt;/th&gt;
           &lt;th&gt;Model&lt;/th&gt;
         &lt;/tr&gt;
       &lt;/thead&gt;
       &lt;tbody&gt;
         &lt;tr&gt;
           &lt;td&gt;NSString&lt;/td&gt;
           &lt;td&gt;NSURL,SEL,Class&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSString&lt;/td&gt;
           &lt;td&gt;
   NSDate parsed with these formats:          &lt;br/&gt;
   yyyy-MM-dd          &lt;br/&gt;
   yyyy-MM-dd HH:mm:ss          &lt;br/&gt;
   yyyy-MM-dd&amp;rsquo;T&amp;rsquo;HH:mm:ss          &lt;br/&gt;
   yyyy-MM-dd&amp;rsquo;T&amp;rsquo;HH:mm:ssZ          &lt;br/&gt;
   EEE MMM dd HH:mm:ss Z yyyy        &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSDate&lt;/td&gt;
           &lt;td&gt;NSString (formatted with ISO8601)&amp;quot;YYYY-MM-dd&amp;rsquo;T&amp;rsquo;HH:mm:ssZ&amp;quot;        &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSString/NSNumber&lt;/td&gt;
           &lt;td&gt;C number (BOOL,int,float,NSUInteger,UInt64,&amp;hellip;)NaN and Inf will be ignored        &lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSNumber&lt;/td&gt;
           &lt;td&gt;NSString (NSNumber.stringValue)&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSValue&lt;/td&gt;
           &lt;td&gt;struct (CGRect,CGSize,&amp;hellip;)&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;NSNull&lt;/td&gt;
           &lt;td&gt;nil,0&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;&amp;quot;null&amp;quot;,&amp;quot;nil&amp;quot;,&amp;quot;no&amp;quot;,&amp;quot;false&amp;quot;,&amp;hellip;&lt;/td&gt;
           &lt;td&gt;nil,0&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;&amp;quot;YES&amp;quot;,&amp;quot;yes&amp;quot;,&amp;quot;true&amp;quot;,&amp;hellip;&lt;/td&gt;
           &lt;td&gt;@(YES)&lt;/td&gt;
         &lt;/tr&gt;
       &lt;/tbody&gt;
     &lt;/table&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果自动转换不能完成，则相应属性会被忽略。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;2-将-model-的属性匹配到指定的-json-nsdictionary-键值:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;2. 将 Model 的属性匹配到指定的 JSON/NSDictionary 键值：&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;// JSON:
{
    &amp;quot;n&amp;quot;:&amp;quot;Harry Pottery&amp;quot;,
    &amp;quot;p&amp;quot;: 256,
    &amp;quot;ext&amp;quot; : {
        &amp;quot;desc&amp;quot; : &amp;quot;A book written by J.K.Rowing.&amp;quot;
    }
}

// Model:
@interface Book : NSObject
@property NSString *name;
@property NSInteger page;
@property NSString *desc;
@end
@implementation Book
+ (NSDictionary *)modelCustomPropertyMapper {
    return @{@&amp;quot;name&amp;quot; : @&amp;quot;n&amp;quot;,
    @&amp;quot;page&amp;quot; : @&amp;quot;p&amp;quot;,
    @&amp;quot;desc&amp;quot; : @&amp;quot;ext.desc&amp;quot;};
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;通过实现 协议中的 modelCustomPropertyMapper，可以将 Model 属性的名字对应到 JSON/NSDictionary 相应的字段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;3-model-属性关联到其他-model:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;3. Model 属性关联到其他 Model&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;// JSON:
{
    &amp;quot;author&amp;quot;:{
        &amp;quot;name&amp;quot;:&amp;quot;J.K.Rowling&amp;quot;,
        &amp;quot;birthday&amp;quot;:&amp;quot;1965-07-31T00:00:00+0000&amp;quot;
    },
    &amp;quot;name&amp;quot;:&amp;quot;Harry Potter&amp;quot;,
    &amp;quot;pages&amp;quot;:256
}

// Model:
@interface Author : NSObject
@property NSString *name;
@property NSDate *birthday;
@end
@implementation Author
@end

@interface Book : NSObject
@property NSString *name;
@property NSUInteger pages;
@property Author *author;
@end
@implementation Book
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;默认什么都不用做，YYModel 就可以自动转换。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;4-model-属性是容器类型:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;4. Model 属性是容器类型&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@class Shadow, Border, Attachment;

@interface Attributes
@property NSString *name;
@property NSArray *shadows;
@property NSSet *borders;
@property NSMutableDictionary *attachments;
@end

@implementation Attributes
+ (NSDictionary *)modelContainerPropertyGenericClass {
    return @{@&amp;quot;shadows&amp;quot; : [Shadow class],
             @&amp;quot;borders&amp;quot; : Border.class,
             @&amp;quot;attachments&amp;quot; : @&amp;quot;Attachment&amp;quot; };
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;通过实现 协议中的 modelContainerPropertyGenericClass，返回 Model 属性容器中需要存放的对象类型，YYModel 会自动进行处理。对象类型可以是 Class 或者 Class name。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;5-黑名单白名单:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;5. 黑名单白名单&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@interface User
@property NSString *name;
@property NSUInteger age;
@end

@implementation Attributes
+ (NSArray *)modelPropertyBlacklist {
    return @{@&amp;quot;test1&amp;quot;, @&amp;quot;test2&amp;quot;};
}
+ (NSArray *)modelPropertyWhitelist {
    return @{@&amp;quot;name&amp;quot;};
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;如果一个 Model 需要忽略某些属性，则可以通过实现 协议中的 modelPropertyBlacklist 来返回属性名列表，YYModel 会在处理过程中忽略这些属性。&lt;/p&gt;

&lt;p&gt;如果一个 Model 只需要处理某些特性的属性，则可以通过实现 协议中的 modelPropertyWhitelist 来返回属性名列表，YYModel 在处理中只会处理列表内的属性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;6-数据校验与额外的处理:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;6. 数据校验与额外的处理&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@interface User
@property NSString *name;
@property NSDate *createdAt;
@end

@implementation User
- (BOOL))modelCustomTransformFromDictionary:(NSDictionary *)dic {
    NSNumber *timestamp = dic[@&amp;quot;timestamp&amp;quot;];
    if (![timestamp isKindOfClass:[NSNumber class]]) return NO;
    _createdAt = [NSDate dateWithTimeIntervalSince1970:timestamp.floatValue];
    return YES;
}

- (BOOL)modelCustomTransformToDictionary:(NSMutableDictionary *)dic {
    if (!_createdAt) return NO;
    dic[@&amp;quot;timestamp&amp;quot;] = @(n.timeIntervalSince1970);
    return YES;
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;果一个 Model 需要校验数据有效性，可以通过实现 协议中的 modelCustomTransformFromDictionary 或 modelCustomTransformToDictionary 方法来完成。如果数据校验失败，则可以返回 NO，YYModel 会忽略这个 Model。&lt;/p&gt;

&lt;p&gt;在上面两个方法中，也可以对 Model/JSON 进行额外的处理，以转换 YYModel 不支持的类型。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;6-coding-copying-hash-equal:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;6.Coding/Copying/hash/equal&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@interface YYShadow :NSObject &amp;lt;NSCoding, NSCopying&amp;gt;
@property (nonatomic, copy) NSString *name;
@property (nonatomic, assign) CGSize size;
@end

@implementation YYShadow
- (void)encodeWithCoder:(NSCoder *)aCoder { [self yy_modelEncodeWithCoder:aCoder]; }
- (id)initWithCoder:(NSCoder *)aDecoder { return [self yy_modelInitWithCoder:aDecoder]; }
- (id)copyWithZone:(NSZone *)zone { return [self yy_modelCopy]; }
- (NSUInteger)hash { return [self yy_modelHash]; }
- (BOOL)isEqual:(id)object { return [self yy_modelIsEqual:object]; }
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;在一个对象的实现中，调用 YYModel 对应的方法，即可实现 NSCoding/NSCopying/hash/equal 协议。YYModel 会自动处理所有有效的 property。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;最后:8ec36dbf2f8e0e1414f1b45b0a0ff0ff&#34;&gt;最后&lt;/h6&gt;

&lt;p&gt;YYModel 的设计目标是高性能和高容错性，虽然功能并不如 Mantle 等项目丰富，但是性能却是远远高于它们。上面所有的方法内部都经过仔细检查，能确保每个属性类型的正确性，避免了可能的崩溃问题。&lt;/p&gt;

&lt;p&gt;from:YYModel作者&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>iOS 自定义 Log 简介</title>
            <link>http://www.flywithme.top/2016/05/27/Dlog-Introduce/</link>
            <pubDate>Fri, 27 May 2016 10:46:06 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2016/05/27/Dlog-Introduce/</guid>
            <description>&lt;p&gt;我们在调试程序的时候，往往需要输出一些日志信息，用到NSLog函数，当我们准备发布程序，需要注释掉NSLog代码，这个时候往往会定义一个宏，在调试的时候，会输出日志，在Release正式版本的时候，会关闭日志输出。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#ifdef DEBUG
# define DLog(fmt, ...) NSLog((@&amp;quot;[FileName:%s]\n&amp;quot; &amp;quot;[FuctionName:%s]\n&amp;quot; &amp;quot;[Line:%d] \n&amp;quot; fmt), __FILE__, __FUNCTION__, __LINE__, ##__VA_ARGS__);
#else
# define DLog(...);
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;sources/dlog/blogDlog.png&#34; alt=&#34;dog&#34; /&gt;&lt;/p&gt;

&lt;p&gt;参数解释：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VA_ARGS&lt;/strong&gt;是一个可变参数的宏，很少人知道这个宏，这个可变参数的宏是新的C99规范中新增的，目前似乎只有gcc支（VC6.0的编译器不支持）。宏前面加上##的作用在于，当可变参数的个数为0时，这里的##起到把前面多余的&amp;rdquo;,&amp;ldquo;去掉的作用,否则会编译出错, 你可以试试。&lt;a href=&#34;http://stackoverflow.com/questions/21873616/how-to-use-va-args-properly&#34;&gt;stackOverflow&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;FILE&lt;/strong&gt;宏在预编译时会替换成当前的源文件名&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;LINE&lt;/strong&gt;宏在预编译时会替换成当前的行号&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;FUNCTION&lt;/strong&gt;宏在预编译时会替换成当前的函数名称&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有了以上这几个宏，特别是有了&lt;strong&gt;VA_ARGS&lt;/strong&gt;，调试信息的输出就变得灵活多了。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>UINavigationBar-使用总结</title>
            <link>http://www.flywithme.top/2016/05/03/UINavigationBar-Summary/</link>
            <pubDate>Tue, 03 May 2016 11:49:19 CST</pubDate>
            <author>Brasbug</author>
            <guid>http://www.flywithme.top/2016/05/03/UINavigationBar-Summary/</guid>
            <description>

&lt;h5 id=&#34;简介:fd9faebe845f09d44f4a35833c132216&#34;&gt;简介&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;UINavigationBar&lt;/code&gt;是用于实现管理层级关系内容的组件，直接继承自&lt;code&gt;UIView&lt;/code&gt;。通常用在&lt;code&gt;UINavgationController&lt;/code&gt;类中，用于管理和显示&lt;code&gt;UINavgationController&lt;/code&gt;的&lt;code&gt;subViewController&lt;/code&gt; , 同时&lt;code&gt;UINavgationBar&lt;/code&gt;也可以单独使用，添加至任何的&lt;code&gt;UIView&lt;/code&gt;中。&lt;code&gt;UINavigationBar&lt;/code&gt;比较重要的属性为，左侧按钮，中间的标题，以及右侧按钮。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NS_CLASS_AVAILABLE_IOS(2_0) @interface UINavigationBar : UIView &amp;lt;NSCoding, UIBarPositioning&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;在导航控制器中的简单使用:fd9faebe845f09d44f4a35833c132216&#34;&gt;在导航控制器中的简单使用&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取导航条&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UINavigationBar *navBar = self.navigationController.navigationBar;
//设置导航栏 title
self.navigationItem.title = @&amp;quot;UINavigationBar使用总结&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置导航栏背景色&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//通过barTintColor来设置背景色
self.navigationController.navigationBar.barTintColor = [UIColor redColor];//iOS7 以上系统  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;sources/navigationbar/navigationbackbartiniColor.png&#34; alt=&#34;navigation back bar tint Color&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置导航栏的背景图片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[self.navigationController.navigationBar setBackgroundImage:[UIImage imageNamed:@&amp;quot;Background&amp;quot;] forBarMetrics:UIBarMetricsDefault];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;sources/navigationbar/uinavigationBarbackground.png&#34; alt=&#34;navigation Bar background&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在这里得稍微说说UIBarMetrics这个枚举, 它主要是用来控制在不同状态下导航栏的显示。和&lt;code&gt;UIButton&lt;/code&gt;的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)setBackgroundImage:(nullable UIImage *)image forState:(UIControlState)state
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个方法有点类似。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef NS_ENUM(NSInteger, UIBarMetrics) {
    UIBarMetricsDefault,
    UIBarMetricsCompact,
    UIBarMetricsDefaultPrompt = 101, // Applicable only in bars with the prompt property, such as UINavigationBar and UISearchBar
    UIBarMetricsCompactPrompt,
    UIBarMetricsLandscapePhone NS_ENUM_DEPRECATED_IOS(5_0, 8_0, &amp;quot;Use UIBarMetricsCompact instead&amp;quot;) = UIBarMetricsCompact,
    UIBarMetricsLandscapePhonePrompt NS_ENUM_DEPRECATED_IOS(7_0, 8_0, &amp;quot;Use UIBarMetricsCompactPrompt&amp;quot;) = UIBarMetricsCompactPrompt,
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置导航栏样式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[navBar setBarStyle:UIBarStyleDefault];  
   分别有如下几种样式：  
typedef NS_ENUM(NSInteger, UIBarStyle) {  
    UIBarStyleDefault          = 0,  
    UIBarStyleBlack            = 1,  
    UIBarStyleBlackOpaque      = 1, // Deprecated. Use UIBarStyleBlack  
    UIBarStyleBlackTranslucent = 2, // Deprecated. Use UIBarStyleBlack and set the translucent property to YES
};    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;我们发现，在后面两个标记为Deprecated，我们知道使用后面两种将不被提倡。
            从枚举中，我们也可以看出：UIBarStyleBlack=1和UIBarStyleBlackOpaque=1表示为一样的。
            后来，发现增加了一个方法：[navBar setTranslucent:YES];用来指示是否透明。
            所以，我们使用UIBarStyleDefault和UIBarStyleBlack来定义UINavigationBar样式，并且用setTranslucent:方法来设置透明与否。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//使用方式
switch (buttonIndex) {
   case 0: // &amp;quot;Default&amp;quot;
       self.navigationController.navigationBar.barStyle = UIBarStyleDefault;
       // Bars are translucent by default.
       self.navigationController.navigationBar.translucent = YES;
       // Reset the bar&#39;s tint color to the system default.
       self.navigationController.navigationBar.tintColor = nil;
       self.navigationController.navigationBar.barTintColor = nil;//iOS7 以上系统


       break;
   case 1: // &amp;quot;Black Opaque&amp;quot;
       self.navigationController.navigationBar.barStyle = UIBarStyleBlack;
       self.navigationController.navigationBar.translucent = NO;
       self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
       break;
   case 2: // &amp;quot;Black Translucent&amp;quot;
       self.navigationController.navigationBar.barStyle = UIBarStyleBlack;
       self.navigationController.navigationBar.translucent = YES;
       self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
       self.navigationController.navigationBar.barTintColor = [UIColor redColor];
       break;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更改顶部状态栏的颜色
   修改完导航栏的颜色之后,顶部状态栏可能因为导航栏的颜色相近而现实不清楚,所以有时候需要修改状态栏的颜色
   状态栏的颜色修改:系统给我们提供了&lt;code&gt;UIStatusBarStyleDefault&lt;/code&gt;和&lt;code&gt;UIStatusBarStyleLightContent&lt;/code&gt;两种样式供我们选择。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   UIStatusBarStyleDefault，系统的默认样式，黑色内容，用于浅色的背景（如白色）
   UIStatusBarStyleLightContent 白色内容，用于深色的背景（如红色）
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下面来看看具体怎么实现，主流的实现方式是分两步：&lt;br /&gt;
   &lt;strong&gt;a.&lt;/strong&gt; 在工程的Info.plist文件中添加一行&lt;code&gt;UIViewControllerBasedStatusBarAppearance&lt;/code&gt;，选择Boolean类型，并设置为YES，Xcode会自动把名称变为&lt;code&gt;View controller-based status bar appearance&lt;/code&gt;。&lt;br /&gt;
   &lt;strong&gt;b.&lt;/strong&gt; 在你的ViewController中添加下面的方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(UIStatusBarStyle)preferredStatusBarStyle{
  return UIStatusBarStyleLightContent;
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;另外，&lt;strong&gt;特别需要注意的是&lt;/strong&gt;，如果你的ViewController是通过navigationController push进来的，还需要加下面一句代码才能生效：
   &lt;code&gt;self.navigationController.navigationBar.barStyle = UIBarStyleBlack;&lt;/code&gt;
   具体，可参考&lt;a href=&#34;http://stackoverflow.com/questions/19108513/uistatusbarstyle-preferredstatusbarstyle-does-not-work-on-ios-7&#34;&gt;UIStatusBarStyle PreferredStatusBarStyle does not work on iOS 7&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;恩，我们来看看运行效果。&lt;br /&gt;
   &lt;img src=&#34;sources/navigationbar/uinavigationBarbackground.png&#34; alt=&#34;naviagation&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置返回按钮
  从上面的效果图中我们可以看到返回按钮还是默认的蓝色按钮，下面我将会大家来介绍返回按钮的个性化。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置返回按钮的颜色 只需要设置tintColor属性即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到的效果图如下：&lt;br /&gt;
&lt;img src=&#34;sources/navigationbar/navigationbartiniColor.png&#34; alt=&#34;naviagation&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;只设置返回按钮的图片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)goToBack {
    [self.navigationController popViewControllerAnimated:YES];
}


- (void)setBackButtonWithImage {
    UIImage *leftButtonIcon = [[UIImage imageNamed:@&amp;quot;LeftButton_back_Icon&amp;quot;]
                               imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
    UIBarButtonItem *leftButton = [[UIBarButtonItem alloc] initWithImage:leftButtonIcon
                                                                   style:UIBarButtonItemStyleBordered
                                                                  target:self
                                                                  action:@selector(goToBack)];
    self.navigationItem.leftBarButtonItem = leftButton;


    //修复navigationController侧滑关闭失效的问题
    self.navigationController.interactivePopGestureRecognizer.delegate = (id)self;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到的效果如下：&lt;br /&gt;
&lt;img src=&#34;sources/navigationbar/navigationBarBackBtn.png&#34; alt=&#34;naviagation&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里需要注意的地方有三点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;需要自己实现返回按钮的事件。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;特别的解释下&lt;code&gt;UIImage&lt;/code&gt;的&lt;code&gt;imageWithRenderingMode:&lt;/code&gt;方法，参数&lt;code&gt;UIImageRenderingModeAlwaysOriginal&lt;/code&gt; 表示总是用原图渲染，如果不这么设置，返回按钮将会显示&lt;code&gt;tintColor&lt;/code&gt;的颜色(默认为蓝色)。&lt;code&gt;UITabbarItem&lt;/code&gt;也存在同样地问题。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我们自己设置返回按钮，会导致系统的侧滑关闭效果失效。添加上面代码中最后一句代码即可修复(&lt;code&gt;self.navigationController.interactivePopGestureRecognizer.delegate = (id)self;&lt;/code&gt;)。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;仅设置返回按钮的文字&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)setBackButtonTitle {
    UIBarButtonItem *leftButton = [[UIBarButtonItem alloc]
            initWithTitle:NSLocalizedString(@&amp;quot;取消&amp;quot;, nil)  
            style:UIBarButtonItemStylePlain  
            target:self action:@selector(goToBack)];
    leftButton.tintColor = [UIColor whiteColor];
    self.navigationItem.leftBarButtonItem = leftButton;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到的效果如下：&lt;br /&gt;
  &lt;img src=&#34;sources/navigationbar/navigationbarBtnTitle.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自定义返回按钮&lt;br /&gt;
 如果上面几种方式还无法满足你的要求（比如，需要同时设置返回按钮文字和图片），就需要用到UIBarButtonItem的initWithCustomView方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)setCustomLeftButton {
    UIView* leftButtonView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 60, 40)];
    UIButton* leftButton = [UIButton buttonWithType:UIButtonTypeSystem];
    leftButton.backgroundColor = [UIColor clearColor];
    leftButton.frame = leftButtonView.frame;
    [leftButton setImage:[UIImage imageNamed:@&amp;quot;LeftButton_back_Icon&amp;quot;] forState:UIControlStateNormal];
    [leftButton setTitle:@&amp;quot;返回&amp;quot; forState:UIControlStateNormal];
    leftButton.tintColor = [UIColor redColor];
    leftButton.autoresizesSubviews = YES;
    leftButton.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;
    leftButton.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleLeftMargin;
    [leftButton addTarget:self action:@selector(goToBack) forControlEvents:UIControlEventTouchUpInside];
    [leftButtonView addSubview:leftButton];
    UIBarButtonItem* leftBarButton = [[UIBarButtonItem alloc] initWithCustomView:leftButtonView];
    self.navigationItem.leftBarButtonItem = leftBarButton;
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到的效果图如下：&lt;br /&gt;
   &lt;img src=&#34;sources/navigationbar/navigationBackBartBackImage.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;设置&lt;code&gt;rightBarButtonItem&lt;/code&gt;基本上脱离不了上面的几种方式，大家可以参照上面返回按钮的设置方式。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;隐藏导航栏底部的线条&lt;br /&gt;
  有时候遇到一些特殊的要求，需要隐藏导航栏底部的线条。
  两行代码就可以做到。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;设置导航栏的背景图（&lt;code&gt;setBackgroundImage&lt;/code&gt;方法）&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置导航栏的shadowImage (&lt;code&gt;setShadowImage&lt;/code&gt;方法)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UINavigationBar *navigationBar = self.navigationController.navigationBar;
//设置透明的背景图，便于识别底部线条有没有被隐藏
[navigationBar setBackgroundImage:[[UIImage alloc] init]
                       forBarPosition:UIBarPositionAny
                           barMetrics:UIBarMetricsDefault];
//此处使底部线条失效
[navigationBar setShadowImage:[UIImage new]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来看看效果图：&lt;br /&gt;
   &lt;img src=&#34;sources/navigationbar/navShadowLineHide.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;还有一种做法，一行代码就可以达到效果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//方法二：
self.navigationController.navigationBar.clipsToBounds = YES;  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;想要知道更详细的内容可以参考这个页面：&lt;a href=&#34;http://stackoverflow.com/questions/19226965/how-to-hide-ios7-uinavigationbar-1px-bottom-line&#34;&gt;How to hide iOS7 UINavigationBar 1px bottom line&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置导航条底部线条的颜色&lt;br /&gt;
   有了上面的基础，设置导航栏线条的颜色就变得很简单了。&lt;br /&gt;
   首先，我做了个UIImage的分类：通过颜色转成UIImage；&lt;br /&gt;
   然后，用上面的方案来设置导航栏底部线条。&lt;/p&gt;

&lt;p&gt;颜色转图片的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation UIImage (ColorImage)


+ (UIImage *)imageWithColor:(UIColor *)color
{
    CGRect rect = CGRectMake(0.0f, 0.0f, 1.0f, 1.0f);
    UIGraphicsBeginImageContext(rect.size);
    CGContextRef context = UIGraphicsGetCurrentContext();


    CGContextSetFillColorWithColor(context, [color CGColor]);
    CGContextFillRect(context, rect);


    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();


    return image;
}


@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置导航栏底部线条颜色的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UINavigationBar *navigationBar = self.navigationController.navigationBar;
[navigationBar setBackgroundImage:[[UIImage alloc] init]
                        forBarPosition:UIBarPositionAny
                            barMetrics:UIBarMetricsDefault];
//此处使底部线条颜色为红色
[navigationBar setShadowImage:[UIImage imageWithColor:[UIColor redColor]]]; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;依照惯例，看下效果图：&lt;br /&gt;
     &lt;img src=&#34;sources/navigationbar/anvShadowSet.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当然还有其他的方式也可以做到，如&lt;code&gt;addSubview&lt;/code&gt;,&lt;code&gt;addSubLayer&lt;/code&gt;等。感兴趣的话可以参考下这个页面：&lt;a href=&#34;http://stackoverflow.com/questions/19101361/ios7-change-uinavigationbar-border-color&#34;&gt;iOS7 - Change UINavigationBar border color&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在导航栏上添加多个按钮&lt;br /&gt;
  以微信打开网页时的效果为例，效果图如下，有两个按钮：返回和关闭。&lt;br /&gt;
    &lt;img src=&#34;sources/navigationbar/dianpschreenshot.png&#34; alt=&#34;center&#34; width=&#34;500&#34;&gt;&lt;/p&gt;

&lt;p&gt;有下面两种方式可供选择，但是最终还是要用到&lt;code&gt;leftBarButtonItems&lt;/code&gt;这个方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define UserMethod1 0


UIBarButtonItem *closeItem = [[UIBarButtonItem alloc] initWithTitle:@&amp;quot;关闭&amp;quot; style:UIBarButtonItemStylePlain target:self action:@selector(closeAction)];
if (UserMethod1) {
    //方法一:
    self.navigationItem.leftBarButtonItems = @[closeItem];
    //要求显示默认的返回按钮，但是文字会显示默认的Back，暂时还不知道这个文字怎么改
    self.navigationItem.leftItemsSupplementBackButton = YES;
}
else {
    //方法二
    UIButton* leftButton = [UIButton buttonWithType:UIButtonTypeSystem];
    leftButton.backgroundColor = [UIColor clearColor];
    leftButton.frame = CGRectMake(0, 0, 45, 40);
    [leftButton setImage:[UIImage imageNamed:@&amp;quot;LeftButton_back_Icon&amp;quot;] forState:UIControlStateNormal];
    [leftButton setTitle:@&amp;quot;返回&amp;quot; forState:UIControlStateNormal];
    leftButton.tintColor = [UIColor whiteColor];
    leftButton.autoresizesSubviews = YES;
    leftButton.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;
    leftButton.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleLeftMargin;
    [leftButton addTarget:self action:@selector(goToBack) forControlEvents:UIControlEventTouchUpInside];
    UIBarButtonItem* backItem = [[UIBarButtonItem alloc] initWithCustomView:leftButton];


    self.navigationItem.leftBarButtonItems = @[backItem,closeItem];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，运行的效果图如下：&lt;br /&gt;
    &lt;img src=&#34;sources/navigationbar/addbtnOnNavBar.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;方法一用到了&lt;code&gt;leftItemsSupplementBackButton&lt;/code&gt; 这个属性，会显示系统默认的返回按钮，但是文字也是显示默认的Back文字，目前还没找到怎么修改这个文字，如果有谁知道，还请不吝赐教；所以我暂时还是建议大家用方法二。相应的还有 &lt;code&gt;rightBarButtonItems&lt;/code&gt; 这个属性，如果要在导航栏右侧展示多个按钮的话，可以设置这个属性。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在导航栏上添加分段控件&lt;/p&gt;

&lt;p&gt;这次，以QQ为例，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UISegmentedControl *segControl = [[UISegmentedControl alloc] initWithItems:@[@&amp;quot;消息&amp;quot;,@&amp;quot;电话&amp;quot;]];
segControl.tintColor = [UIColor colorWithRed:0.07 green:0.72 blue:0.96 alpha:1];
[segControl setSelectedSegmentIndex:0];
self.navigationItem.titleView = segControl;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码很简单，就是设置 &lt;code&gt;titleView&lt;/code&gt; 这个属性，当然，你也可以把这个属性设置为你自定义的View.&lt;br /&gt;
  &lt;img src=&#34;sources/navigationbar/NavTitleView.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;导航栏全局属性设置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//全局设置导航栏主题
- (void)setNavigationControllerAppearance {
    [UINavigationBar appearance].barStyle  = UIBarStyleBlack;
    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithWhite:0.1 alpha:0.5]];
    [[UINavigationBar appearance] setTintColor:[UIColor whiteColor]];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;全局设置导航栏的好处有两个：一是不用对每个 &lt;code&gt;NavigationBar&lt;/code&gt; 进行设置；二是方便做主题管理，切换主题，只需要更改全局设置即可。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;与导航栏相关的一些开源组件&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ninjinkun/NJKWebViewProgress&#34;&gt;NJKWebViewProgress&lt;/a&gt; - 类似于Safiri加载网页时的进度显示&lt;br /&gt;
&lt;img src=&#34;sources/navigationbar/njgWebprogress.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/forkingdog/FDFullscreenPopGesture&#34;&gt;FDFullscreenPopGesture&lt;/a&gt; 一个丝滑的全屏滑动返回手势&lt;br /&gt;
    原文介绍&lt;a href=&#34;http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/&#34;&gt;链接&lt;/a&gt;&lt;br /&gt;
    &lt;img src=&#34;sources/navigationbar/snapshot0.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;h5&gt;&lt;code&gt;UINavigationItem&lt;/code&gt; 和 &lt;code&gt;UINavigationBar&lt;/code&gt; 关系分&lt;/h5&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;关系分析 &lt;code&gt;UIBarItem&lt;/code&gt; -&amp;gt; &lt;code&gt;UIBarButtonItem&lt;/code&gt; -&amp;gt; &lt;code&gt;UINavigationItem&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;UIBarItem&lt;/code&gt;: 类是一个可以放置在Bar之上的所有小控件类的抽象类。继承了该基类所有子类在外观上类似于一个Button，它们都有一个标题，图片，动作以及目标，这点可以从其子类的初始化方法处看到。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;UIBarButtonItem&lt;/code&gt;: 专门用来放在 &lt;code&gt;UIToolbar&lt;/code&gt; 或者 &lt;code&gt;UINavigationBar&lt;/code&gt; 的特殊 &lt;code&gt;button&lt;/code&gt;. 基本行为跟 &lt;code&gt;button&lt;/code&gt; 是一样的。另外从IOS5开始的 &lt;code&gt;Customizing Appearance&lt;/code&gt; 增加了一系列的方法调整显示。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;UINavigationItem: NSObject&lt;/code&gt;: 包含了当前页面导航栏上需要显示的全部信息 &lt;code&gt;title,prompt,titleView,leftBarButtonItem,rightBarButtonItem,backBarButonItem&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;UINavigationBar :UIView&lt;/code&gt; :  NavigaitonBar 就是导航栏，位于屏幕的上方，管理整个NavigationController的navigationItem，即类似navigationcontroller一样提供了一个栈来管理item。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;UINavigtionController :UIViewController&lt;/code&gt;: 包含：viewcontrollers、navigationbar、toolbar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;navigationbar：UIView&lt;/code&gt;: 包含：items(UINavigationItem)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;viewController&lt;/code&gt;:  包含navigationitem，toolItem.  这两个属性控制了当前页面当前页面的navigationbar，toolbar的外观。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;关系综述&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;navigationcontroller&lt;/code&gt; 直接控制 &lt;code&gt;viewcontrollers&lt;/code&gt;，然后包含的 &lt;code&gt;navigationbar&lt;/code&gt; 形成整个nv的导航栏，bar并包含整个&lt;code&gt;navigationItem&lt;/code&gt; 的栈,管理整个nv的  navigationitem（ NSArray *items 属性）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;navigationItem&lt;/code&gt; 包含了bar视图的全部元素（如&lt;code&gt;title,tileview,backBarButtonItem&lt;/code&gt;等），受当前&lt;code&gt;viewcontroller&lt;/code&gt;管理，即bar形成整个nv的导航视图，然后每个nv页面的导航栏元素由所在页面的 &lt;code&gt;navigationItem&lt;/code&gt; 管理。即设置当前页面的左右barbutton，用 &lt;code&gt;self.navigationItem.leftBarButtonItem&lt;/code&gt; 等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/brasbug/UINavigationBar.git&#34;&gt;Code Demo&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
