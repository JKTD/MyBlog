<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 案发现场 </title>
        <link>http://blog.flywithme.top/post/</link>
        <language>zh-CN</language>
        <author>CoderZh</author>
        <rights>Copyright (c) 2015, CoderZh; all rights reserved.</rights>
        <updated>Thu, 28 Jan 2016 16:42:11 CST</updated>
        
        <item>
            <title>JKImageView</title>
            <link>http://blog.flywithme.top/2016/01/28/JKImageView/</link>
            <pubDate>Thu, 28 Jan 2016 16:42:11 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.flywithme.top/2016/01/28/JKImageView/</guid>
            <description>&lt;div id=&#34;article_content&#34; class=&#34;article_content&#34;&gt;

&lt;div style=&#34;font-size:21px; color:rgb(30,78,121)&#34;&gt;&lt;span style=&#34;font-family:Helvetica Neue&#34;&gt;&lt;a target=&#34;_blank&#34; target=&#34;_blank&#34; href=&#34;https://github.com/brasbug/JKImageView&#34;&gt;项目地址:https://github.com/brasbug/JKImageView&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&#34;font-size:21px; color:rgb(30,78,121)&#34;&gt;&lt;span style=&#34;font-family:Helvetica Neue&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div style=&#34;font-size:21px; color:rgb(30,78,121)&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;第一步：拿到网络图片并显示出来&lt;/span&gt;&lt;/div&gt;
&lt;ol style=&#34;font-size:14px&#34;&gt;
&lt;li value=&#34;1&#34; style=&#34;vertical-align:middle&#34;&gt;&lt;span style=&#34;font-size:16px&#34;&gt;&lt;span style=&#34;font-family:Helvetica&#34;&gt;首先重网络拿到图片资源&lt;/span&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li value=&#34;1&#34; style=&#34;vertical-align:middle&#34;&gt;代码&lt;img src=&#34;http://img.blog.csdn.net/20151111193517077?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;div style=&#34;font-size:11px&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;ol style=&#34;font-size:14px&#34;&gt;
&lt;li value=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;&lt;span style=&#34;font-size:16px&#34;&gt;&lt;span style=&#34;font-family:Helvetica&#34;&gt;&lt;span lang=&#34;zh-CN&#34;&gt;把拿到的图片资源给相应的控件来展示&lt;/span&gt;&lt;span lang=&#34;en-US&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span lang=&#34;zh-CN&#34;&gt;so&lt;/span&gt;&lt;span lang=&#34;en-US&#34;&gt;easy !!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li value=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;代码&lt;img src=&#34;http://img.blog.csdn.net/20151111193549847?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;li value=&#34;2&#34; style=&#34;vertical-align:middle&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&lt;span style=&#34;color:rgb(94,94,94)&#34;&gt;&lt;span style=&#34;font-size:13px&#34;&gt;然而因为没有考虑线程阻塞问题，一张图片还好，如果有多张网络图片或者列表里需要展示一系列网络图片，这样做的结果就是被自己蠢哭！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;div style=&#34;font-size:11px&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&lt;span style=&#34;color:rgb(151,151,151)&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&lt;span style=&#34;color:rgb(117,112,112)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&#34;font-size:21px; color:rgb(30,78,121)&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;第二步：怎么做才能让我拿到图片的时候不卡&lt;/span&gt;&lt;/div&gt;
&lt;ul style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;&lt;span style=&#34;font-family:Helvetica&#34;&gt;&lt;span style=&#34;font-size:16px&#34;&gt;这个时候就需要借助于多线程技术了&lt;/span&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;多线程是什么玩意儿：&lt;span style=&#34;color:rgb(94,94,94)&#34;&gt;iOS程序在启动的时候会创建一个主线程。因为一个线程只能执行一件事情，如果主线程执行某些耗时操作，比如我之前遇到的问题加载图片，或者是下载资源文件等就会阻塞主线程(导致界面卡死现象)，所以就需要使用多线程技术避免这类情况。iOS中有三种多线程技术，NSThread，NSOperation，GCD，这3种技术随着iOS的发展引入，抽象层次由低到高，使用也越来越简单。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-size:16px&#34;&gt;&lt;span style=&#34;font-family:Helvetica&#34;&gt;多线程一些必要知识点&lt;/span&gt;&lt;/span&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(94,94,94)&#34;&gt;&lt;strong&gt;多线程使用并不是无节制的&lt;/strong&gt;：iOS主线程堆栈大小是1M左右&lt;a target=&#34;_blank&#34; href=&#34;http://blog.csdn.net/brasbug/article/details/50232829&#34;&gt;点击打开链接&lt;/a&gt;，从第二个线程开始都是512KB（&lt;a target=&#34;_blank&#34; target=&#34;_blank&#34; href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html&#34;&gt;&lt;span style=&#34;color:rgb(94,94,94)&#34;&gt;官方文档&lt;/span&gt;&lt;/a&gt;）&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(94,94,94)&#34;&gt;&lt;strong&gt;只有主线程可以修改UI&lt;/strong&gt;（显示图片，更改显示文字等）,因为其余线程都是独立于Cocao Touch的，虽然有时在异步线程中可以实现界面修改，但是强烈不建议这么做。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(94,94,94)&#34;&gt;&lt;strong&gt;多线程并不能提高程序的运行效率&lt;/strong&gt;，而是通过并发任务提高资源使用率来提高系统的整体性能。就单核而言，两个线程可以解决线程阻塞问题，但是执行效率比起一个线程执行是差不多的，并且再创建一个新线程的时候会消耗一定的内存和CPU时间。多线程只是葱粉发挥系统多核处理器的优势，并发执行任务以提高效率。但是哪个CPU上执行任务都是由系统调度的，开发者不需要纠结有几个CPU，只需要关系线程的使用以及线程间的关系就可以了。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(94,94,94)&#34;&gt;尽量不要多个线程去抢夺共享资源，如果必须要这样做，需要注意线程安全。&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;span style=&#34;color:rgb(94,94,94)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;ul style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;&lt;span style=&#34;font-size:16px&#34;&gt;&lt;span style=&#34;font-family:Helvetica&#34;&gt;&lt;span lang=&#34;zh-CN&#34;&gt;So 现在开始考虑到底选用哪一种方法来完成我的功能&lt;/span&gt;&lt;span lang=&#34;zh-CN&#34;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&lt;span style=&#34;color:rgb(117,112,112)&#34;&gt;&lt;span style=&#34;color:rgb(0,144,81)&#34;&gt;&lt;span lang=&#34;zh-CN&#34;&gt;&lt;a target=&#34;_blank&#34; target=&#34;_blank&#34; href=&#34;http://blog.flywithme.top/2016/01/28/NSThread/&#34;&gt;NSThread&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&lt;span lang=&#34;zh-CN&#34;&gt;&lt;a target=&#34;_blank&#34; target=&#34;_blank&#34; href=&#34;http://blog.flywithme.top/2016/01/28/NSOperation&#34;&gt;NSOperation&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&lt;span style=&#34;color:rgb(117,112,112)&#34;&gt;&lt;span style=&#34;color:rgb(0,144,81)&#34;&gt;&lt;span lang=&#34;zh-CN&#34;&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://blog.flywithme.top/2016/01/28/GCD/&#34;&gt;GCD（全称：Grand
 Central Dispatch）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&#34;zh-CN&#34;&gt;（&lt;/span&gt;&lt;span lang=&#34;en-US&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span lang=&#34;zh-CN&#34;&gt;是基于&lt;/span&gt;&lt;span lang=&#34;en-US&#34;&gt;C&lt;/span&gt;&lt;span lang=&#34;zh-CN&#34;&gt;语言的框架，可以充分利用多核，是苹果推荐使用的多线程技术）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;ul style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;&lt;span style=&#34;font-size:16px&#34;&gt;&lt;span style=&#34;font-family:Helvetica&#34;&gt;选哪一种技术来完成我的图片异步加载&lt;/span&gt;&lt;/span&gt;
&lt;ol&gt;
&lt;li&gt;NSThread 不能控制线程执行顺序，不能控制线程并发数，需要自己管理线程生命周期（我要做的太多）&lt;/li&gt;&lt;li&gt;GCD会自动管理线程的生命周期（创建线程、调度任务、销毁线程）（我能做的太少，如果是一个用时非常长的操作，我无法取消）&lt;/li&gt;&lt;li&gt;NSOperation 我不想做的和我想自己做的都给我预留。 看来只能选你啦。（可以很方便的取消一个线程，可以很容易的添加依赖关系，可以设置最大并发数，提供了任务状态。）&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;br&gt;
&lt;/div&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&lt;span style=&#34;color:rgb(30,78,121)&#34;&gt;&lt;span style=&#34;font-size:21px&#34;&gt;第三步：新建一个UIImageView的Category &amp;nbsp;UIImageView&amp;#43;JKWebCache&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;; color:rgb(117,112,112); font-size:15px&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;ul style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;写出异步方法并用来加载网络图片
&lt;ul&gt;
&lt;li&gt;加载代码&lt;img src=&#34;http://img.blog.csdn.net/20151111193615033?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;li&gt;结果：图片加载成功，而且没有卡主线程。 但是列表每次重载图片的时候都会重新请求网络图片，效果没达到预期。&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;看来需要把图片缓存下来，以便下次重载的时候调用。
&lt;ul&gt;
&lt;li&gt;JKImageCache &amp;nbsp; 这个类是我用来处理缓存数据的。&lt;/li&gt;&lt;li&gt;有一个单例方法 &amp;#43;(instancetype)shareInstance &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/li&gt;&lt;li&gt;我选择用&lt;a target=&#34;_blank&#34; target=&#34;_blank&#34; href=&#34;&#34;&gt;NSCache&lt;/a&gt; 来存储下载的图片数据&lt;/li&gt;&lt;li&gt;&lt;br&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;但是有一个问题关闭应用或者内存报警之后NSCache会清除一部分数据或者清空，再次加载同一张照片的时候还是会再下载一次。&lt;/li&gt;&lt;li&gt;SO：我打算把下载的图片缓存到disk中,下次加载的时候先从内存拿，拿不到再去disk拿，也拿不到就去下载。下载成功之后会缓存到内存和disk中。
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;http://img.blog.csdn.net/20151111193710356?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;br&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;ul style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;
&lt;ul style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;但是当我再重本地拿图片的时候发现了一个Bug &amp;nbsp;之前加载的GIF图片不会动了。
&lt;ul&gt;
&lt;li&gt;经查找原因 ，应该是存储是时候损失了一些图片信息 判断data是不是空， 非空就不再做图片转换。&lt;/li&gt;&lt;li&gt;&lt;img src=&#34;http://img.blog.csdn.net/20151120174037166?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;br&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;加上占位图功能 过期图片自动清理（每次当应用退出到后天的时候会调用cleanDiskFile方法清理过期图片）
&lt;ul&gt;
&lt;li&gt;判断缓存和内存中没有改地址图片的的时候使用占位图展示。&lt;/li&gt;&lt;li&gt;&lt;img src=&#34;http://img.blog.csdn.net/20151120174116617?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;li&gt;&lt;img src=&#34;http://img.blog.csdn.net/20151120174139005?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;br&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;white-space:pre&#34;&gt;&lt;/span&gt;
&lt;ul style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;一个最基本的 网络图片加载工具完成了。&lt;/li&gt;&lt;/ul&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;br&gt;
&lt;/div&gt;
&lt;div style=&#34;font-size:15px; color:rgb(117,112,112)&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&lt;span style=&#34;color:rgb(30,78,121)&#34;&gt;&lt;span style=&#34;font-size:21px&#34;&gt;第四步：&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;; font-size:21px&#34;&gt;&lt;span style=&#34;color:rgb(30,78,121)&#34;&gt;优化一些细节&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ul style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;; font-size:14px&#34;&gt;图片下载方法过于简单， 会遇到很多无法下载的情况，而无法查找原因&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;; font-size:14px&#34;&gt;&lt;img src=&#34;http://img.blog.csdn.net/20151120174212964?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;; font-size:14px&#34;&gt;&lt;span style=&#34;font-size:14px&#34;&gt;把下载抽出来做管理&lt;/span&gt;&lt;br&gt;
&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;; font-size:14px&#34;&gt;&lt;span style=&#34;font-size:14px&#34;&gt;&lt;img src=&#34;http://img.blog.csdn.net/20151120174248939?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;; font-size:14px&#34;&gt;&lt;span style=&#34;font-size:14px&#34;&gt;&lt;span style=&#34;font-size:14px&#34;&gt;增加了cancel 方法&lt;/span&gt;&lt;br&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;/div&gt;
   

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>NSThread</title>
            <link>http://blog.flywithme.top/2016/01/28/NSThread/</link>
            <pubDate>Thu, 28 Jan 2016 16:37:37 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.flywithme.top/2016/01/28/NSThread/</guid>
            <description>&lt;div id=&#34;article_content&#34; class=&#34;article_content&#34;&gt;

&lt;div style=&#34;font-size:14px&#34;&gt;&lt;span style=&#34;font-size:18px&#34;&gt;一、概述:&lt;/span&gt;&lt;/div&gt;
&lt;ol style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;NSThread是一个轻量级的多线程技术，每一个对象代表一个线程。&lt;/li&gt;&lt;li&gt;优点：轻量级，使用简单&lt;/li&gt;&lt;li&gt;缺点: &amp;nbsp;不能控制线程执行顺序，不能控制线程并发数，需要自己管理线程生命周期&lt;/li&gt;&lt;/ol&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;span style=&#34;font-size:18px&#34;&gt;二、开启一个异步线程&lt;/span&gt;&lt;/div&gt;
&lt;ul style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;NSThread是一个轻量级&lt;a target=&#34;_blank&#34; href=&#34;&#34; style=&#34;color:#69aa35&#34;&gt;NSThread&lt;/a&gt;的多线程技术，每一个对象代表一个线程。
&lt;ul&gt;
&lt;li&gt;示例开启线程&lt;img src=&#34;http://img.blog.csdn.net/20151209101649280?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;span style=&#34;font-size:18px&#34;&gt;三、在主线程上更新界面等操作&lt;/span&gt;&lt;/div&gt;
&lt;ul style=&#34;font-size:14px&#34;&gt;
&lt;li&gt;示例 子线程耗时操作结束之后去主线程更新UI&lt;/li&gt;&lt;li&gt;&lt;img src=&#34;http://img.blog.csdn.net/20151209101707564?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;
&lt;div style=&#34;border:0px; outline:0px; padding:0px; vertical-align:baseline; word-wrap:break-word&#34;&gt;
&lt;div&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;,Helvetica,STheiti,微软雅黑,黑体,Arial,Tahoma,sans-serif,serif&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;font-size:18px&#34;&gt;四、其他&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;如果需要处理的东西很耗内存，则需要给线程做内存管理 加上autoreleasepool 会更好&lt;/li&gt;&lt;li&gt;&lt;img src=&#34;http://img.blog.csdn.net/20151209101735255?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;br&gt;
&lt;/li&gt;&lt;li&gt;线程休眠
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;font-family:&#39;Helvetica Neue&#39;&#34;&gt;&lt;span style=&#34;color:rgb(94,94,94)&#34;&gt;// 指定休眠到多久日期&lt;br&gt;
&amp;#43; (void)sleepUntilDate:(NSDate *)date;&lt;br&gt;
// 指定休眠的毫秒数&lt;br&gt;
&amp;#43; (void)sleepForTimeInterval:(NSTimeInterval)ti;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;&lt;/div&gt;
   

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>NSOperation的简单使用</title>
            <link>http://blog.flywithme.top/2016/01/28/NSOperation</link>
            <pubDate>Thu, 28 Jan 2016 15:57:21 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.flywithme.top/2016/01/28/NSOperation</guid>
            <description>&lt;div id=&#34;article_content&#34; class=&#34;article_content&#34;&gt;

&lt;div style=&#34;font-size:14px&#34;&gt;
&lt;div&gt;&lt;span style=&#34;font-size:24px&#34;&gt;&lt;span style=&#34;font-family:Rokkitt,serif&#34;&gt;&lt;span style=&#34;color:rgb(71,71,71)&#34;&gt;一、NSOperation的简介&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div style=&#34;border:0px; outline:0px; padding:0px; vertical-align:baseline; word-wrap:break-word&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;font-family:Muli,sans-serif&#34;&gt;&lt;span style=&#34;color:rgb(58,58,58)&#34;&gt;NSOperation的抽象程度高于NSThread，它是苹果对线程的一个面向对象封装。NSOperation表示一个独立的计算单元，作为一个抽象类，你需要实例话他的子类&amp;nbsp;&amp;nbsp;NSInvocationOperation /&amp;nbsp;&amp;nbsp;NSBlockOperation 来进行具体操作。实例化之后，调用start方法或者加入到一个NSOperationQueue 操作队列中，就可以开始执行。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div&gt;&lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;font-size:14px&#34;&gt;
&lt;div style=&#34;border:0px; outline:0px; padding:0px; vertical-align:baseline; clear:both&#34;&gt;
&lt;div&gt;&lt;span style=&#34;font-size:24px&#34;&gt;&lt;span style=&#34;color:rgb(71,71,71)&#34;&gt;&lt;span style=&#34;font-family:Rokkitt,serif&#34;&gt;二、NSOperation的使用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div style=&#34;border:0px; outline:0px; padding:0px; vertical-align:baseline; clear:both&#34;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(71,71,71)&#34;&gt;&lt;span style=&#34;font-family:Rokkitt,serif&#34;&gt;&lt;span style=&#34;font-size:18px&#34;&gt;直接启动一个NSInvocationOperation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(71,71,71)&#34;&gt;&lt;span style=&#34;font-family:Rokkitt,serif&#34;&gt;&lt;span style=&#34;font-size:18px&#34;&gt;示例&lt;img src=&#34;http://img.blog.csdn.net/20151209102222185?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;使用NSOperationQueue管理NSOperation并开启一个异步线程
&lt;ul&gt;
&lt;li&gt;示例&lt;img src=&#34;http://img.blog.csdn.net/20151209102239167?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;使用NSOperationQueue管理并NSBlockOperation开启一个线程
&lt;ul&gt;
&lt;li&gt;NSBlockOperation与NSInvocationOperation没有神马本质的区别，只是NSBlockOperation使用代码块会更方便一些。&lt;/li&gt;&lt;li&gt;示例&lt;img src=&#34;http://img.blog.csdn.net/20151209102254701?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;在主线程中执行某些操作&amp;nbsp;&lt;img src=&#34;http://img.blog.csdn.net/20151209102333588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;li&gt;添加线程之间的依赖关系
&lt;ul&gt;
&lt;li&gt;直接再队列中添加操作会并发执行，谁先谁后是系统调用决定的，但是在某些特定时候我们需要控制操作的执行顺序，就会使用addDependency操作。addDependency：是NSOperation的成员方法,调用该方法的NSOperation对象将在参数执行完成之后执行。需要先添加依赖关系，再将操作添加到队列中。&lt;/li&gt;&lt;li&gt;示例&lt;img src=&#34;http://img.blog.csdn.net/20151209102349935?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;控制线程并发数
&lt;ul&gt;
&lt;li&gt;并发的线程越多越耗资源，队列可以设置同事并发线程的数量来进行控制&lt;/li&gt;&lt;li&gt;示例&lt;img src=&#34;http://img.blog.csdn.net/20151209102406696?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;取消一个操作
&lt;ul&gt;
&lt;li&gt;NSOperation里有一系列的属性来表明自身状态： isReady → isExecuting → isFinish 。线程start后并不是立即执行，而是进入一个就绪的状态(isReady)，由系统调度执行。 有时可能需要进行取消操作，可以调用 -(void)cancel;来停止一些还未执行的不必要线程.&lt;/li&gt;&lt;li&gt;示例&lt;img src=&#34;http://img.blog.csdn.net/20151209102434144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;优先级
&lt;ul&gt;
&lt;li&gt;NSOpertaion可以通过threadPriority属性来指定优先级。 但是在iOS8中，线程这个概念已经被苹果框架系统性的忽略了,threadPriority已由NSQualityOfService属性替代。&lt;/li&gt;&lt;li&gt;NSOperationQueuePriority的枚举类型如下&lt;img src=&#34;http://img.blog.csdn.net/20151209102452878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;li&gt;NSQualityOfService的枚举类型如下&lt;img src=&#34;http://img.blog.csdn.net/20151209102505173?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,STheiti,微软雅黑,黑体,Arial,Tahoma,sans-serif,serif; font-size:14px&#34;&gt;
&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div style=&#34;font-family:Rokkitt; font-size:14px&#34;&gt;
&lt;div&gt;&lt;span style=&#34;font-size:24px&#34;&gt;&lt;span style=&#34;color:rgb(71,71,71)&#34;&gt;&lt;span style=&#34;font-family:Rokkitt,serif&#34;&gt;二、NSOperation小结&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;font-family:Rokkitt,serif&#34;&gt;&lt;span style=&#34;color:rgb(71,71,71)&#34;&gt;&amp;nbsp;NSOperation方便控制线程执行顺序&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(71,71,71)&#34;&gt;使用NSBlockOperation可以使用块代码，不必单鞋线程方法，便于传递多个参数&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(71,71,71)&#34;&gt;可以控制线程并发数，有效的对线程进行控制&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(71,71,71)&#34;&gt;可以添加线程完成代码块，执行需要的操作&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
   

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;!-- Baidu Button BEGIN --&gt;
</description>
        </item>
        
        <item>
            <title>GCD的介绍和使用</title>
            <link>http://blog.flywithme.top/2016/01/28/GCD/</link>
            <pubDate>Thu, 28 Jan 2016 14:16:48 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.flywithme.top/2016/01/28/GCD/</guid>
            <description>&lt;div id=&#34;article_content&#34; class=&#34;article_content&#34;&gt;

&lt;div style=&#34;font-size:14px&#34;&gt;&lt;span style=&#34;color:rgb(51,153,102); font-family:&#39;Helvetica Neue&#39;,Helvetica,STheiti,微软雅黑,黑体,Arial,Tahoma,sans-serif,serif; font-size:14px&#34;&gt;GCD的介绍和使用&lt;/span&gt;&lt;/div&gt;
&lt;div style=&#34;font-family:&#39;Helvetica Neue&#39;,Helvetica,STheiti,微软雅黑,黑体,Arial,Tahoma,sans-serif,serif; font-size:14px&#34;&gt;
&lt;div style=&#34;padding:0px&#34;&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div style=&#34;padding:0px; color:rgb(51,51,51)&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;padding:0px; color:rgb(51,51,51)&#34;&gt;Grand Central Dispatch 简称（GCD）是苹果公司开发的技术，以优化的应用程序支持多核心处理器和其他的对称多处理系统的系统。这建立在任务并行执行的线程池模式的基础上的。它首次发布在Mac OS X 10.6 ，iOS 4及以上也可用。 GCD是基于C语言的，这意味着高效率&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&#34;padding:0px; color:rgb(51,51,51)&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;padding:0px&#34;&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&#34;padding:0px&#34;&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;设计&lt;/strong&gt;&lt;/span&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;GCD是苹果公司为多核的并行运算提出的解决方案&lt;/li&gt;&lt;li&gt;GCD会自动利用更多的CPU内核（比如双核、四核）&lt;/li&gt;&lt;li&gt;GCD会自动管理线程的生命周期（创建线程、调度任务、销毁线程）&lt;/li&gt;&lt;li&gt;程序员只需要告诉GCD想要执行什么任务，不需要编写任何线程管理代码&lt;/li&gt;&lt;/ul&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;GCD存在于libdispatch.dylib这个库中，这个调度库包含了GCD的所有的东西，但任何IOS程序，默认就加载了这个库，在程序运行的过程中会动态的加载这个库，不需要我们手动导入。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;GCD是纯C语言的，因此我们在编写GCD相关代码的时候，面对的函数，而不是方法。&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;GCD中的函数大多数都以dispatch开头。&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;br&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;任务和队列：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;GCD中有2个核心概念:&lt;/span&gt;&lt;/span&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;任务：执行什么操作&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;队列：用来存放任务&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;GCD的使用就2个步骤:&lt;/span&gt;&lt;/span&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;定制任务&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;确定想做的事情&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;div&gt;
&lt;div&gt;&lt;span style=&#34;font-size:13px&#34;&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;将任务添加到队列中，GCD会自动将队列中的任务取出，放到对应的线程中执行&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;font-family:&#39;Courier New&#39;&#34;&gt;&lt;span style=&#34;font-size:12px&#34;&gt;&lt;span style=&#34;color:rgb(0,144,81)&#34;&gt;提示：任务的取出遵循队列的FIFO原则：先进先出，后进后出&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;执行任务：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;GCD中有2个用来执行任务的函数:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li style=&#34;display:inline; list-style:none&#34;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;用同步的方式执行任务&amp;nbsp;dispatch_sync(dispatch_queue_t&amp;nbsp;queue,&amp;nbsp;dispatch_block_t&amp;nbsp;block)；&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;用异步的方式执行任务&amp;nbsp;dispatch_async(dispatch_queue_t&amp;nbsp;queue,&amp;nbsp;dispatch_block_t&amp;nbsp;block);&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(0,144,81)&#34;&gt;&lt;span style=&#34;font-size:12px&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 注：&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:rgb(0,144,81); font-size:12px&#34;&gt;参数说明：&lt;/span&gt;&lt;span style=&#34;color:rgb(0,144,81); font-size:12px&#34;&gt;queue：队列，&lt;/span&gt;&lt;span style=&#34;color:rgb(0,144,81); font-size:12px&#34;&gt;block：任务&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;font-size:12px&#34;&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;span style=&#34;color:rgb(0,144,81)&#34;&gt;函数说明：把右边的参数（任务）提交给左边的参数（队列）进行执行。&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;同步和异步的区别:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li style=&#34;display:inline; list-style:none&#34;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;同步：在当前线程中执行&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;异步：在另一条线程中执行&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;div&gt;&lt;strong&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;队列类型：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;GCD可以分为两大类：&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:#333333&#34;&gt;并发队列（Concurrent&amp;nbsp;Dispatch Queue） &amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li style=&#34;display:inline; list-style:none&#34;&gt;
&lt;ol&gt;
&lt;li style=&#34;display:inline; list-style:none&#34;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;可以让多个任务并发（同时）执行（自动开启多个线程同时执行任务）&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;并发功能只有在异步（dispatch_async）函数下才有效&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li style=&#34;display:inline; list-style:none&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;串行队列（Serial Dispatch Queue）&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;div&gt;
&lt;ol&gt;
&lt;li style=&#34;display:inline; list-style:none&#34;&gt;
&lt;ol&gt;
&lt;li style=&#34;display:inline; list-style:none&#34;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;让任务一个接一个的执行（一个任务执行完毕后，再执行下一个任务）&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;strong&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;补充说明（同步，异步，串行，并发）：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&amp;nbsp;同步异步决定了要不要开启新的线程&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;同步：在当前线程中执行任务，不具备开启新线程的能力&lt;/li&gt;&lt;li&gt;异步：在新的线程中执行任务，具备开启新线程的能力&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;并发和串行决定了任务的执行方式&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;并发：多个任务同时执行&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;串行:一个任务执行完毕后，再执行下一个任务&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;br&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;并发队列：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;GCD默认已经提供了全局的并发队列，供整个应用使用，不需要手动创建&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;使用dispatch_get_global_queue函数获得全局的并发队列&lt;/li&gt;&lt;li&gt;dispatch_queue_t&amp;nbsp;dispatch_get_global_queue(dispatch_queue_priority_t&amp;nbsp;priority,unsigned&amp;nbsp;long&amp;nbsp;flags);&amp;nbsp;// flags 此参数暂时无用，现只能是0,&lt;img src=&#34;http://img.blog.csdn.net/20151209102937705?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;cid:4ff2ece2a343aab97c17f6151e57002e&#34; alt=&#34;&#34; style=&#34;height:auto&#34;&gt;&lt;/li&gt;&lt;li&gt;示例：
&lt;ul&gt;
&lt;li&gt;第一个参数为优先级，这里选择默认的。获取一个全局的默认优先级的并发队列。dispatch_queue_t&amp;nbsp;queue&amp;nbsp;=&amp;nbsp;dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,&amp;nbsp;0);&amp;nbsp;//&amp;nbsp;获得全局并发队列&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;说明：全局并发队列的优先级&amp;nbsp;&lt;br&gt;
#define&amp;nbsp;DISPATCH_QUEUE_PRIORITY_HIGH&amp;nbsp;2&amp;nbsp;//&amp;nbsp;高&lt;br&gt;
#define&amp;nbsp;DISPATCH_QUEUE_PRIORITY_DEFAULT&amp;nbsp;0&amp;nbsp;//&amp;nbsp;默认（中）&lt;br&gt;
#define&amp;nbsp;DISPATCH_QUEUE_PRIORITY_LOW&amp;nbsp;(-2)&amp;nbsp;//&amp;nbsp;低&lt;br&gt;
#define&amp;nbsp;DISPATCH_QUEUE_PRIORITY_BACKGROUND&amp;nbsp;INT16_MIN&amp;nbsp;//&amp;nbsp;后台&lt;/li&gt;&lt;/ul&gt;
&lt;div&gt;&lt;br&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;串行队列：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;GCD中获取串行队列有2种途径&amp;nbsp;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;span style=&#34;font-family:Menlo&#34;&gt;dispatch_queue_create函数创建串行队列&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;dispatch_queue_t&lt;/span&gt; &lt;span style=&#34;font-family:Menlo&#34;&gt;
queue = dispatch_queue_create(&amp;lt;#const char *label#&amp;gt;, &amp;lt;#dispatch_queue_attr_t attr#&amp;gt;)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;队列名称 &amp;nbsp;&lt;/span&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;&amp;lt;#const char *label#&amp;gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;队列属性&amp;nbsp;&lt;/span&gt; &lt;span style=&#34;font-family:Menlo&#34;&gt;
&amp;lt;#dispatch_queue_attr_t attr#&amp;gt;&lt;/span&gt;&lt;span style=&#34;font-size:11px; font-family:Menlo; color:rgb(255,255,255)&#34;&gt;&amp;nbsp;&lt;span style=&#34;color:rgb(0,144,81)&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:rgb(0,144,81)&#34;&gt;&lt;span style=&#34;font-size:11px; font-family:Menlo&#34;&gt;//&lt;span style=&#34;color:rgb(148,82,0)&#34;&gt;DISPATCH_QUEUE_CONCURRENT&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;font-size:11px; font-family:&#39;PingFang SC&#39;&#34;&gt;并行队列&lt;span style=&#34;font-family:Menlo&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;font-size:11px; font-family:Menlo&#34;&gt;//&lt;span style=&#34;color:rgb(148,82,0)&#34;&gt;DISPATCH_QUEUE_SERIAL&lt;/span&gt; &amp;nbsp;&lt;/span&gt;
&lt;span style=&#34;font-size:11px; font-family:&#39;PingFang SC&#39;&#34;&gt;串行队列 或者使用null&lt;/span&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;示例&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;dispatch_queue_t&amp;nbsp;queue&amp;nbsp;=&amp;nbsp;dispatch_queue_create(&amp;quot;Jack&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color:rgb(148,82,0)&#34;&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;DISPATCH_QUEUE_SERIAL&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;);&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;//&amp;nbsp;创建&lt;/span&gt;&lt;span style=&#34;font-family:Menlo&#34;&gt;dispatch_release(queue);&amp;nbsp;//&amp;nbsp;非ARC需要释放手动创建的队列&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;使用主队列（跟主线程相关联的队列）
&lt;ul&gt;
&lt;li&gt;主队列是GCD自带的一种特殊的串行队列,放在主队列中的任务，都会放到主线程中执行
&lt;ul&gt;
&lt;li&gt;使用dispatch_get_main_queue()获得主队列&lt;/li&gt;&lt;li&gt;示例：dispatch_queue_t&amp;nbsp;queue&amp;nbsp;=&amp;nbsp;dispatch_get_main_queue();&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(128,0,0)&#34;&gt;&lt;strong&gt;代码示例：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;&#34;&gt;&lt;span style=&#34;color:rgb(0,0,0)&#34;&gt;Dispatch&amp;nbsp;Queues&amp;nbsp;的使用&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;用异步函数往并发队列中添加任务
&lt;ul&gt;
&lt;li&gt;示例&lt;img src=&#34;http://img.blog.csdn.net/20151209102959642?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;
&lt;div&gt;
&lt;div style=&#34;border:1px solid rgb(204,204,204); padding:5px; overflow:auto; background-color:rgb(245,245,245)&#34;&gt;
&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;总结:同时开启了3个子线程 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;用异步函数往串行队列中添加任务&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;示例&lt;img src=&#34;http://img.blog.csdn.net/20151209103013076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/span&gt;
&lt;div style=&#34;border:1px solid rgb(204,204,204); padding:5px; overflow:auto; background-color:rgb(245,245,245)&#34;&gt;
&lt;span style=&#34;font-size:13px&#34;&gt;总结：会开启线程，但是只开启一个线程&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;用同步函数往并发队列中添加任务&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;示例&lt;img src=&#34;http://img.blog.csdn.net/20151209103040300?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;
&lt;div style=&#34;border:1px solid rgb(204,204,204); padding:5px; overflow:auto; background-color:rgb(245,245,245)&#34;&gt;
总结：不会开启新的线程,并发队列失去了并发功能&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&#34;padding:0px&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&amp;nbsp;补充&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;队列名称的作用:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;调试的时候，可以看得出任务在哪个队列中执行&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;white-space:pre&#34;&gt; &lt;img src=&#34;http://img.blog.csdn.net/20151209103155746?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;span style=&#34;white-space:pre&#34;&gt;&lt;span style=&#34;white-space:pre&#34;&gt;&lt;img src=&#34;http://img.blog.csdn.net/20151209103214014?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;&lt;span style=&#34;white-space:pre&#34;&gt;&lt;span style=&#34;white-space:pre&#34;&gt;&lt;span style=&#34;white-space:pre&#34;&gt;&lt;img src=&#34;http://img.blog.csdn.net/20151209103229639?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li style=&#34;display:inline; list-style:none&#34;&gt;
&lt;ul&gt;
&lt;li style=&#34;display:inline; list-style:none&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(51,51,51)&#34;&gt;总结：&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:rgb(94,94,94)&#34;&gt;同步函数不具备开启线程的能力，无论是神马队列都不会开启线程，异步函数具备开启线程的能力，但不一定会开线程，开启几条线程由队列决定(串行队列只会开启一条新的进程，并发队列会开启多条进程).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
   

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
